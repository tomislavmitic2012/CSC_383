<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="Object_files/filelist.xml">
<link rel=Edit-Time-Data href="Object_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Object: The Cosmic Superclass</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>DePaul University</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>DePaul University</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>41</o:TotalTime>
  <o:Created>2009-03-03T18:02:00Z</o:Created>
  <o:LastSaved>2009-03-03T18:02:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>4914</o:Words>
  <o:Characters>28013</o:Characters>
  <o:Company>DePaul University</o:Company>
  <o:Lines>233</o:Lines>
  <o:Paragraphs>65</o:Paragraphs>
  <o:CharactersWithSpaces>32862</o:CharactersWithSpaces>
  <o:Version>11.9999</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:"Arial Unicode MS";
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:"\@SimSun";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:SimSun;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
h3
	{margin-top:11.25pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:9.0pt;
	font-family:"Times New Roman";
	color:black;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:9.0pt;
	font-family:"Times New Roman";
	color:white;}
h5
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:13.0pt;
	font-family:"Times New Roman";
	font-style:italic;}
a:link, span.MsoHyperlink
	{color:#00217B;
	mso-text-animation:none;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:SimSun;}
tt
	{font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:SimSun;
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
p.doctext, li.doctext, div.doctext
	{mso-style-name:doctext;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:SimSun;}
span.doctexthighlight2
	{mso-style-name:doctexthighlight2;}
span.docemphasis
	{mso-style-name:docemphasis;}
p.docnotetitle, li.docnotetitle, div.docnotetitle
	{mso-style-name:docnotetitle;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:SimSun;}
p.doclist, li.doclist, div.doclist
	{mso-style-name:doclist;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:SimSun;}
span.docemphitalicalt
	{mso-style-name:docemphitalicalt;}
span.docemphboldalt
	{mso-style-name:docemphboldalt;}
span.docemphstrong
	{mso-style-name:docemphstrong;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:227543996;
	mso-list-template-ids:-593602108;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:770079078;
	mso-list-template-ids:501020272;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:851457661;
	mso-list-template-ids:947050164;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l3
	{mso-list-id:1143354187;
	mso-list-template-ids:75557608;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l4
	{mso-list-id:1393308558;
	mso-list-template-ids:672165380;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l5
	{mso-list-id:2002729144;
	mso-list-template-ids:1674073258;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US link="#00217B" vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h3 align=center style='text-align:center'><tt><span style='font-size:14.0pt'>Object</span></tt><span
style='font-size:14.0pt'>: The Cosmic <span class=SpellE>Superclass</span><o:p></o:p></span></h3>

<p class=doctext><a name=The><span style='font-size:8.5pt;color:black'>The </span></a><a
name=snippet></a><span style='mso-bookmark:The'><tt><span style='font-size:
10.0pt;color:black'>Object</span></tt></span><a name="the_ultimate"></a><span
style='mso-bookmark:The'><span style='font-size:8.5pt;color:black'> class is
the ultimate ancestor—every class in <span class=doctexthighlight2>Java</span>
extends </span></span><span style='mso-bookmark:The'><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt></span><a
name="never_have"></a><span style='mso-bookmark:The'><span style='font-size:
8.5pt;color:black'>. However, you never have to write<o:p></o:p></span></span></p>

<pre><span style='mso-bookmark:The'><span class=GramE><span style='color:black'>class</span></span><span
style='color:black'> Employee extends Object<o:p></o:p></span></span></pre>

<p class=MsoNormal><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></span></p>

<p class=doctext><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'>The ultimate <span class=SpellE>superclass</span> </span></span><span
style='mso-bookmark:The'><tt><span style='font-size:10.0pt;color:black'>Object</span></tt></span><a
name="granted_if"></a><span style='mso-bookmark:The'><span style='font-size:
8.5pt;color:black'> is taken for granted if no <span class=SpellE>superclass</span>
is explicitly mentioned. Because <span class=docemphasis>every</span> class in <span
class=doctexthighlight2>Java</span> extends </span></span><span
style='mso-bookmark:The'><tt><span style='font-size:10.0pt;color:black'>Object</span></tt></span><a
name="with_the"></a><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'>, it is important to be familiar with the services provided by the
</span></span><span style='mso-bookmark:The'><tt><span style='font-size:10.0pt;
color:black'>Object</span></tt></span><a name="ones_in"></a><span
style='mso-bookmark:The'><span style='font-size:8.5pt;color:black'> class. We
go over the basic ones in this chapter and refer you to later chapters or to
the on-line documentation for what is not covered here. (Several methods of </span></span><span
style='mso-bookmark:The'><tt><span style='font-size:10.0pt;color:black'>Object</span></tt></span><a
name="with_threads"></a><span style='mso-bookmark:The'><span style='font-size:
8.5pt;color:black'> come up only when dealing with threads—see </span></span><a
href="http://proquestcombo.safaribooksonline.com/9780132354769/ch14#ch14"><span
style='mso-bookmark:The'><span style='font-size:8.5pt'>Chapter 14</span></span><span
style='mso-bookmark:The'></span></a><span style='mso-bookmark:The'><span
style='font-size:8.5pt;color:black'> for more on threads.)<o:p></o:p></span></span></p>

<p class=doctext><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'>You can use a variable of type </span></span><span
style='mso-bookmark:The'><tt><span style='font-size:10.0pt;color:black'>Object</span></tt></span><span
style='mso-bookmark:The'><span style='font-size:8.5pt;color:black'> to refer to
objects of any type:<o:p></o:p></span></span></p>

<pre><span style='mso-bookmark:The'><span style='color:black'>Object <span
class=SpellE>obj</span> = new <span class=GramE>Employee(</span>&quot;Harry Hacker&quot;, 35000);<o:p></o:p></span></span></pre>

<p class=MsoNormal><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></span></p>

<p class=doctext><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'>Of course, a variable of type </span></span><span
style='mso-bookmark:The'><tt><span style='font-size:10.0pt;color:black'>Object</span></tt></span><a
name="To_do"></a><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'> is only useful as a generic holder for arbitrary values. To do
anything specific with the value, you need to have some knowledge about the
original type and then apply a cast:<o:p></o:p></span></span></p>

<pre><span style='mso-bookmark:The'><span style='color:black'>Employee e = (Employee) <span
class=SpellE>obj</span>;<o:p></o:p></span></span></pre>

<p class=MsoNormal><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></span></p>

<p class=doctext><span style='mso-bookmark:The'><span style='font-size:8.5pt;
color:black'>In <span class=doctexthighlight2>Java</span>, only the <span
class=docemphasis>primitive types</span> (numbers, characters, and </span></span><span
style='mso-bookmark:The'><span class=SpellE><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>boolean</span></tt></span></span></span><span
style='mso-bookmark:The'><span style='font-size:8.5pt;color:black'> values) are
not objects.<o:p></o:p></span></span></p>

<p class=doctext><span style='mso-bookmark:The'><a name="arrays_of"></a><span
style='font-size:8.5pt;color:black'>All array types, no matter whether they are
arrays of objects or arrays of primitive types, are class types that extend the
</span></span><span style='mso-bookmark:The'><tt><span style='font-size:10.0pt;
color:black'>Object</span></tt></span><span style='mso-bookmark:The'><span
style='font-size:8.5pt;color:black'> class.<o:p></o:p></span></span></p>

<pre><span style='mso-bookmark:The'><span class=GramE><span style='color:black'>Employee[</span></span><span
style='color:black'>] staff = new Employee[10];<o:p></o:p></span></span></pre><pre><span
style='mso-bookmark:The'><span class=SpellE><span class=GramE><span
style='color:black'>obj</span></span></span><span style='color:black'> = staff; // OK<o:p></o:p></span></span></pre><pre><span
style='mso-bookmark:The'><span class=SpellE><span class=GramE><span
style='color:black'>obj</span></span></span><span style='color:black'> = new <span
class=SpellE>int</span>[10]; // OK<o:p></o:p></span></span></pre>

<p class=MsoNormal><span style='mso-bookmark:The'><a name=ch05note19></a><span
style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></span></p>

<h4><span style='mso-bookmark:The'>The </span><span style='mso-bookmark:The'><tt><span
style='font-size:10.0pt'>equals</span></tt> Method</span></h4>

<span style='mso-bookmark:The'></span>

<p class=doctext><a name=iddle2698></a><a name=iddle1598></a><span
style='font-size:8.5pt;color:black'>The </span><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt></span><span
style='font-size:8.5pt;color:black'> method in the </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><a name="tests_whether"></a><span
style='font-size:8.5pt;color:black'> class tests whether one object is
considered equal to another. The </span><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt></span><span
style='font-size:8.5pt;color:black'> method, as implemented in the </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><a name="This_is"></a><span
style='font-size:8.5pt;color:black'> class, determines whether two object
references are identical. This is a pretty reasonable default—if two objects
are identical, they should certainly be equal. For quite a few classes, nothing
else is required. For example, it makes little sense to compare two </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>PrintStream</span></tt></span><a
name="want_to"></a><span style='font-size:8.5pt;color:black'> objects for
equality. However, you will often want to implement state-based equality
testing, in which two objects are considered equal when they have the same
state.<o:p></o:p></span></p>

<p class=doctext><a name="employees_equal"></a><span style='font-size:8.5pt;
color:black'>For example, let us consider two employees equal if they have the
same name, salary, and hire date. (In an actual employee database, it would be
more sensible to compare IDs instead. We use this example to demonstrate the
mechanics of implementing the </span><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt></span><span
style='font-size:8.5pt;color:black'> method.)<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>class</span></span><span
style='color:black'> Employee<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>. . .<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span><span class=GramE>public</span> <span
class=SpellE>boolean</span> equals(Object <span class=SpellE>otherObject</span>)<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>{<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>// a quick test to see if the objects are identical<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>if</span> (this == <span class=SpellE>otherObject</span>) return true;<o:p></o:p></span></pre><pre><span
style='color:black'><o:p>&nbsp;</o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>      </span>// must return false if the explicit parameter is null<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>if</span> (<span class=SpellE>otherObject</span> == null) return false;<o:p></o:p></span></pre><pre><span
style='color:black'><o:p>&nbsp;</o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>      </span>// if the classes don't match, they can't be equal<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>if</span> (<span class=SpellE>getClass</span>() != <span
class=SpellE>otherObject.getClass</span>())<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>         </span><span
class=GramE>return</span> false;<o:p></o:p></span></pre><pre><span
style='color:black'><o:p>&nbsp;</o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>      </span>// now we know <span
class=SpellE>otherObject</span> is a non-null Employee<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>Employee other = (Employee) <span
class=SpellE>otherObject</span>;<o:p></o:p></span></pre><pre><span
style='color:black'><o:p>&nbsp;</o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>      </span>// test whether the fields have identical values<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>return</span> <span class=SpellE>name.equals</span>(<span
class=SpellE>other.name</span>)<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>         </span>&amp;&amp; <span
class=GramE>salary</span> == <span class=SpellE>other.salary</span><o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>         </span>&amp;&amp; <span
class=SpellE><span class=GramE>hireDay.equals</span></span><span class=GramE>(</span><span
class=SpellE>other.hireDay</span>);<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>getClass</span></tt></span><a
name="in_detail"></a><span style='font-size:8.5pt;color:black'> method returns
the class of an object—we discuss this method in detail later in this chapter.
In our test, two objects can only be equal when they belong to the same class.<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>When you define the </span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>equals</span></tt></span><span
style='font-size:8.5pt;color:black'> method for a subclass, first call </span><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt><a name="objects_can"></a><span
style='font-size:8.5pt;color:black'> on the <span class=SpellE>superclass</span>.
If that test doesn't pass, then the objects can't be equal. If the <span
class=SpellE>superclass</span> fields are equal, then you are ready to compare
the instance fields of the subclass.<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>class</span></span><span
style='color:black'> Manager extends Employee<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>. . .<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span><span class=GramE>public</span> <span
class=SpellE>boolean</span> equals(Object <span class=SpellE>otherObject</span>)<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>{<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>if</span> (!<span class=SpellE>super.equals</span>(<span
class=SpellE>otherObject</span>)) return false;<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>// <span
class=SpellE>super.equals</span> checked that this and <span class=SpellE>otherObject</span> belong to the same class<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>Manager other = (Manager) <span
class=SpellE>otherObject</span>;<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>return</span> bonus == <span class=SpellE>other.bonus</span>;<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre><pre><span style='color:black'><o:p>&nbsp;</o:p></span></pre>

<h4>Equality Testing and Inheritance</h4>

<p class=doctext><a name=iddle1916></a><a name=iddle1597></a><span
style='font-size:8.5pt;color:black'>How should the </span><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt></span><a
name="method_behave"></a><span style='font-size:8.5pt;color:black'> method
behave if the implicit and explicit parameters don't belong to the same class?
This has been an area of some controversy. In the preceding example, the </span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>equals</span></tt></span><span
style='font-size:8.5pt;color:black'> method returns </span><tt><span
style='font-size:10.0pt;color:black'>false</span></tt><a name="classes_don"></a><span
style='font-size:8.5pt;color:black'> if the classes don't match exactly. But
many programmers use an </span><span class=SpellE><tt><span style='font-size:
10.0pt;color:black'>instanceof</span></tt></span><span style='font-size:8.5pt;
color:black'> test instead:<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>if</span></span><span
style='color:black'> (!(<span class=SpellE>otherObject</span> <span
class=SpellE>instanceof</span> Employee)) return false;<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="leaves_open"></a><span style='font-size:8.5pt;
color:black'>This leaves open the possibility that </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>otherObject</span></tt></span><a
name="a_subclass"></a><span style='font-size:8.5pt;color:black'> can belong to
a subclass. However, this approach can get you into trouble. Here is why. The <span
class=doctexthighlight2>Java</span> Language Specification requires that the </span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>equals</span></tt></span><span
style='font-size:8.5pt;color:black'> method has the following properties:<o:p></o:p></span></p>

<table class=MsoNormalTable border=0 cellpadding=0 style='mso-cellspacing:1.5pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a name=ch05pro04></a><b><span style='font-size:8.5pt;
  color:black'>1. </span></b><span style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>It is <span class=docemphasis>reflexive</span>: For any non-null
  reference </span><tt><span style='font-size:10.0pt;color:black'>x</span></tt><span
  style='font-size:8.5pt;color:black'>, </span><span class=SpellE><tt><span
  style='font-size:10.0pt;color:black'>x.equals</span></tt></span><tt><span
  style='font-size:10.0pt;color:black'>(x)</span></tt><span style='font-size:
  8.5pt;color:black'> should return </span><tt><span style='font-size:10.0pt;
  color:black'>true</span></tt><span style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>2. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>It is <span class=docemphasis>symmetric</span>: For any
  references </span><tt><span style='font-size:10.0pt;color:black'>x</span></tt><span
  style='font-size:8.5pt;color:black'> and </span><tt><span style='font-size:
  10.0pt;color:black'>y</span></tt><span style='font-size:8.5pt;color:black'>, </span><span
  class=SpellE><tt><span style='font-size:10.0pt;color:black'>x.equals</span></tt></span><tt><span
  style='font-size:10.0pt;color:black'>(y)</span></tt><span style='font-size:
  8.5pt;color:black'> should return </span><tt><span style='font-size:10.0pt;
  color:black'>true</span></tt><span style='font-size:8.5pt;color:black'> if
  and only if </span><span class=SpellE><tt><span style='font-size:10.0pt;
  color:black'>y.equals</span></tt></span><tt><span style='font-size:10.0pt;
  color:black'>(x)</span></tt><span style='font-size:8.5pt;color:black'>
  returns </span><tt><span style='font-size:10.0pt;color:black'>true</span></tt><span
  style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>3. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>It is <span class=docemphasis>transitive</span>: For any
  references </span><tt><span style='font-size:10.0pt;color:black'>x</span></tt><span
  style='font-size:8.5pt;color:black'>, </span><tt><span style='font-size:10.0pt;
  color:black'>y</span></tt><span style='font-size:8.5pt;color:black'>, and </span><tt><span
  style='font-size:10.0pt;color:black'>z</span></tt><span style='font-size:
  8.5pt;color:black'>, if </span><span class=SpellE><tt><span style='font-size:
  10.0pt;color:black'>x.equals</span></tt></span><tt><span style='font-size:
  10.0pt;color:black'>(y)</span></tt><span style='font-size:8.5pt;color:black'>
  returns </span><tt><span style='font-size:10.0pt;color:black'>true</span></tt><span
  style='font-size:8.5pt;color:black'> and </span><span class=SpellE><span
  class=GramE><tt><span style='font-size:10.0pt;color:black'>y.equals</span></tt></span></span><span
  class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
  style='font-size:10.0pt;color:black'>z)</span></tt><span style='font-size:
  8.5pt;color:black'> returns </span><tt><span style='font-size:10.0pt;
  color:black'>true</span></tt><span style='font-size:8.5pt;color:black'>, then
  </span><span class=SpellE><tt><span style='font-size:10.0pt;color:black'>x.equals</span></tt></span><tt><span
  style='font-size:10.0pt;color:black'>(z)</span></tt><span style='font-size:
  8.5pt;color:black'> should return </span><tt><span style='font-size:10.0pt;
  color:black'>true</span></tt><span style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>4. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>It is <span class=docemphasis>consistent</span>: If the objects
  to which </span><tt><span style='font-size:10.0pt;color:black'>x</span></tt><span
  style='font-size:8.5pt;color:black'> and </span><tt><span style='font-size:
  10.0pt;color:black'>y</span></tt><span style='font-size:8.5pt;color:black'>
  refer haven't changed, then repeated calls to </span><span class=SpellE><tt><span
  style='font-size:10.0pt;color:black'>x.equals</span></tt></span><tt><span
  style='font-size:10.0pt;color:black'>(y)</span></tt><span style='font-size:
  8.5pt;color:black'> return the same value.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>5. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>For any non-null reference </span><tt><span style='font-size:
  10.0pt;color:black'>x</span></tt><span style='font-size:8.5pt;color:black'>, </span><span
  class=SpellE><span class=GramE><tt><span style='font-size:10.0pt;color:black'>x.equals</span></tt></span></span><span
  class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
  style='font-size:10.0pt;color:black'>null)</span></tt><span style='font-size:
  8.5pt;color:black'> should return </span><tt><span style='font-size:10.0pt;
  color:black'>false</span></tt><span style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=doctext><a name="a_library"></a><span style='font-size:8.5pt;
color:black'>These rules are certainly reasonable. You wouldn't want a library <span
class=SpellE>implementor</span> to ponder whether to call </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>x.equals</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>(y)</span></tt><span style='font-size:
8.5pt;color:black'> or </span><span class=SpellE><tt><span style='font-size:
10.0pt;color:black'>y.equals</span></tt></span><tt><span style='font-size:10.0pt;
color:black'>(x)</span></tt><a name="a_data"></a><span style='font-size:8.5pt;
color:black'> when locating an element in a data structure.<o:p></o:p></span></p>

<p class=doctext><a name="consequences_when"></a><span style='font-size:8.5pt;
color:black'>However, the symmetry rule has subtle consequences when the
parameters belong to different classes. Consider a call<o:p></o:p></span></p>

<pre><span class=SpellE><span class=GramE><span style='color:black'>e.equals</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span style='color:black'>m)<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span class=GramE><span style='font-size:8.5pt;color:black'>where</span></span><span
style='font-size:8.5pt;color:black'> </span><tt><span style='font-size:10.0pt;
color:black'>e</span></tt><span style='font-size:8.5pt;color:black'> is an </span><tt><span
style='font-size:10.0pt;color:black'>Employee</span></tt><span
style='font-size:8.5pt;color:black'> object and </span><tt><span
style='font-size:10.0pt;color:black'>m</span></tt><span style='font-size:8.5pt;
color:black'> is a </span><tt><span style='font-size:10.0pt;color:black'>Manager</span></tt><a
name="hire_date"></a><span style='font-size:8.5pt;color:black'> object, both of
which happen to have the same name, salary, and hire date. If </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>Employee.equals</span></tt></span><span
style='font-size:8.5pt;color:black'> uses an </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>instanceof</span></tt></span><span
style='font-size:8.5pt;color:black'> test, the call returns </span><tt><span
style='font-size:10.0pt;color:black'>true</span></tt><span style='font-size:
8.5pt;color:black'>. But that means that the reverse call<o:p></o:p></span></p>

<pre><span class=SpellE><span class=GramE><span style='color:black'>m.equals</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span style='color:black'>e)<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span class=GramE><span style='font-size:8.5pt;color:black'>also</span></span><span
style='font-size:8.5pt;color:black'> needs to return </span><tt><span
style='font-size:10.0pt;color:black'>true</span></tt><a name=return></a><span
style='font-size:8.5pt;color:black'>—the symmetry rule does not allow it to
return </span><tt><span style='font-size:10.0pt;color:black'>false</span></tt><a
name="throw_an"></a><span style='font-size:8.5pt;color:black'> or to throw an
exception.<o:p></o:p></span></p>

<p class=doctext><a name="That_leaves"></a><span style='font-size:8.5pt;
color:black'>That leaves the </span><tt><span style='font-size:10.0pt;
color:black'>Manager</span></tt><a name="a_bind"></a><span style='font-size:
8.5pt;color:black'> class in a bind. Its </span><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt></span><a name="must_be"></a><span
style='font-size:8.5pt;color:black'> method must be willing to compare itself
to any </span><tt><span style='font-size:10.0pt;color:black'>Employee</span></tt><a
name="into_account"></a><span style='font-size:8.5pt;color:black'>, without
taking manager-specific information into account! All of a sudden, the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>instanceof</span></tt></span><span
style='font-size:8.5pt;color:black'> test looks less attractive!<o:p></o:p></span></p>

<p class=doctext><a name="that_the"></a><span style='font-size:8.5pt;
color:black'>Some authors have gone on record that the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>getClass</span></tt></span><a
name="violates_the"></a><span style='font-size:8.5pt;color:black'> test is
wrong because it violates the substitution principle. A commonly cited example
is the </span><span class=GramE><tt><span style='font-size:10.0pt;color:black'>equals</span></tt></span><span
style='font-size:8.5pt;color:black'> method in the </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>AbstractSet</span></tt></span><a
name="sets_have"></a><span style='font-size:8.5pt;color:black'> class that
tests whether two sets have the same elements. The </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>AbstractSet</span></tt></span><span
style='font-size:8.5pt;color:black'> class has two concrete subclasses, </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>TreeSet</span></tt></span><span
style='font-size:8.5pt;color:black'> and </span><span class=SpellE><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>HashSet</span></tt></span></span><span
class=GramE><span style='font-size:8.5pt;color:black'>, that</span></span><span
style='font-size:8.5pt;color:black'> use different algorithms for locating set
elements. You really want to be able to compare any two sets, no matter how
they are implemented.<o:p></o:p></span></p>

<p class=doctext><a name="make_sense"></a><span style='font-size:8.5pt;
color:black'>However, the set example is rather specialized. It would make
sense to declare </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>AbstractSet.equals</span></tt></span><span style='font-size:8.5pt;
color:black'> as </span><tt><span style='font-size:10.0pt;color:black'>final</span></tt><a
name="should_redefine"></a><span style='font-size:8.5pt;color:black'>, because
nobody should redefine the semantics of set equality. (The method is not
actually </span><tt><span style='font-size:10.0pt;color:black'>final</span></tt><a
name="This_allows"></a><span style='font-size:8.5pt;color:black'>. This allows
a subclass to implement a more efficient algorithm for the equality test.)<o:p></o:p></span></p>

<p class=doctext><a name="we_see"></a><span style='font-size:8.5pt;color:black'>The
way we see it, there are two distinct scenarios:<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo1;
tab-stops:list .5in'><a name="subclasses_can"></a><![if !supportLists]><span
style='font-size:10.0pt;mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:8.5pt;color:black'>If
subclasses can have their own notion of equality, then the symmetry requirement
forces you to use the </span><span class=SpellE><tt><span style='font-size:
10.0pt;color:black'>getClass</span></tt></span><span style='font-size:8.5pt;
color:black'> test.<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo1;
tab-stops:list .5in'><a name="of_equality"></a><![if !supportLists]><span
style='font-size:10.0pt;mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:8.5pt;color:black'>If the
notion of equality is fixed in the <span class=SpellE>superclass</span>, then
you can use the </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>instanceof</span></tt></span><a name="subclasses_to"></a><span
style='font-size:8.5pt;color:black'> test and allow objects of different
subclasses to be equal to another.<o:p></o:p></span></p>

<p class=doctext><a name="employees_and"></a><span style='font-size:8.5pt;
color:black'>In the example of the employees and managers, we consider two
objects to be equal when they have matching fields. If we have two </span><tt><span
style='font-size:10.0pt;color:black'>Manager</span></tt><span style='font-size:
8.5pt;color:black'> <span class=GramE>objects</span> with the same name,
salary, and hire date, but with different bonuses, we want them to be
different. Therefore, we used the </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>getClass</span></tt></span><span
style='font-size:8.5pt;color:black'> test.<o:p></o:p></span></p>

<p class=doctext><a name="This_notion"></a><span style='font-size:8.5pt;
color:black'>But suppose we used an employee ID for equality testing. This
notion of equality makes sense for all subclasses. Then we could use the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>instanceof</span></tt></span><span
style='font-size:8.5pt;color:black'> test, and we should declare </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>Employee.equals</span></tt></span><span
style='font-size:8.5pt;color:black'> as </span><tt><span style='font-size:10.0pt;
color:black'>final</span></tt><span style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>

<p class=docnotetitle><a name=ch05note20></a><span style='font-size:8.5pt;
color:black'>Note<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The standard <span
class=doctexthighlight2>Java</span> library contains over 150 implementations
of </span><tt><span style='font-size:10.0pt;color:black'>equals</span></tt><span
style='font-size:8.5pt;color:black'> methods, with a mishmash of using </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>instanceof</span></tt></span><span
style='font-size:8.5pt;color:black'>, calling </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>getClass</span></tt></span><span
style='font-size:8.5pt;color:black'>, catching a </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>ClassCastException</span></tt></span><span
style='font-size:8.5pt;color:black'>, or doing nothing at all.<o:p></o:p></span></p>

<p class=doctext><a name=perfect></a><span style='font-size:8.5pt;color:black'>Here
is a recipe for writing the perfect </span><tt><span style='font-size:10.0pt;
color:black'>equals</span></tt><span style='font-size:8.5pt;color:black'>
method:<o:p></o:p></span></p>

<table class=MsoNormalTable border=0 cellpadding=0 style='mso-cellspacing:1.5pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a name=ch05pro05></a><b><span style='font-size:8.5pt;
  color:black'>1. </span></b><span style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>Name the explicit parameter </span><span class=SpellE><tt><span
  style='font-size:10.0pt;color:black'>otherObject</span></tt></span><span
  style='font-size:8.5pt;color:black'>—later, you need to cast it to another
  variable that you should call </span><tt><span style='font-size:10.0pt;
  color:black'>other</span></tt><span style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>2. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>Test whether </span><tt><span style='font-size:10.0pt;
  color:black'>this</span></tt><span style='font-size:8.5pt;color:black'>
  happens to be identical to </span><span class=SpellE><tt><span
  style='font-size:10.0pt;color:black'>otherObject</span></tt></span><span
  style='font-size:8.5pt;color:black'>:<o:p></o:p></span></p>
  <pre><span style='color:black'>if (this == <span class=SpellE>otherObject</span>) return true;<o:p></o:p></span></pre>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'><br>
  This statement is just an optimization. In practice, this is a common case.
  It is much cheaper to check for identity than to compare the fields.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>3. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>Test whether </span><span class=SpellE><tt><span
  style='font-size:10.0pt;color:black'>otherObject</span></tt></span><span
  style='font-size:8.5pt;color:black'> is </span><tt><span style='font-size:
  10.0pt;color:black'>null</span></tt><span style='font-size:8.5pt;color:black'>
  and return </span><tt><span style='font-size:10.0pt;color:black'>false</span></tt><span
  style='font-size:8.5pt;color:black'> if it is. This test is required.<o:p></o:p></span></p>
  <pre><span style='color:black'>if (<span class=SpellE>otherObject</span> == null) return false;<o:p></o:p></span></pre>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>4. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>Compare the classes of </span><tt><span style='font-size:10.0pt;
  color:black'>this</span></tt><span style='font-size:8.5pt;color:black'> and </span><span
  class=SpellE><tt><span style='font-size:10.0pt;color:black'>otherObject</span></tt></span><span
  style='font-size:8.5pt;color:black'>. If the semantics of </span><tt><span
  style='font-size:10.0pt;color:black'>equals</span></tt><span
  style='font-size:8.5pt;color:black'> can change in subclasses, use the </span><span
  class=SpellE><tt><span style='font-size:10.0pt;color:black'>getClass</span></tt></span><span
  style='font-size:8.5pt;color:black'> test:<o:p></o:p></span></p>
  <pre><span style='color:black'>if (<span class=SpellE>getClass</span>() != <span
  class=SpellE>otherObject.getClass</span>()) return false;<o:p></o:p></span></pre>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'><br>
  If the same semantics holds for <span class=docemphasis>all</span>
  subclasses, you can use an </span><span class=SpellE><tt><span
  style='font-size:10.0pt;color:black'>instanceof</span></tt></span><span
  style='font-size:8.5pt;color:black'> test:<o:p></o:p></span></p>
  <pre><span style='color:black'>if (!(<span class=SpellE>otherObject</span> <span
  class=SpellE>instanceof</span> <span class=SpellE><span
  class=docemphitalicalt>ClassName</span></span>)) return false;<o:p></o:p></span></pre>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>5. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>Cast </span><span class=SpellE><tt><span style='font-size:10.0pt;
  color:black'>otherObject</span></tt></span><span style='font-size:8.5pt;
  color:black'> to a variable of your class type:<o:p></o:p></span></p>
  <pre><span class=SpellE><span class=docemphitalicalt><span style='color:black'>ClassName</span></span></span><span
  style='color:black'> other = (<span class=SpellE><span
  class=docemphitalicalt>ClassName</span></span>) <span class=SpellE>otherObject</span><o:p></o:p></span></pre>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;mso-yfti-lastrow:yes'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>6. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>Now compare the fields, as required by your notion of equality.
  Use </span><tt><span style='font-size:10.0pt;color:black'>==</span></tt><span
  style='font-size:8.5pt;color:black'> for primitive type fields, </span><tt><span
  style='font-size:10.0pt;color:black'>equals</span></tt><span
  style='font-size:8.5pt;color:black'> for object fields. Return </span><tt><span
  style='font-size:10.0pt;color:black'>true</span></tt><span style='font-size:
  8.5pt;color:black'> if all fields match, </span><tt><span style='font-size:
  10.0pt;color:black'>false</span></tt><span style='font-size:8.5pt;color:black'>
  otherwise.<o:p></o:p></span></p>
  <pre><span style='color:black'>return <span class=docemphitalicalt>field</span><sub>1</sub> == other.<span
  class=docemphitalicalt>field</span><sub>1</sub><o:p></o:p></span></pre><pre><span
  style='color:black'><span style='mso-spacerun:yes'>   </span>&amp;&amp; <span
  class=docemphitalicalt>field</span><sub>2</sub>.equals(other.<span
  class=docemphitalicalt>field</span><sub>2</sub>)<o:p></o:p></span></pre><pre><span
  style='color:black'><span style='mso-spacerun:yes'>   </span>&amp;&amp; . . .;<o:p></o:p></span></pre>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'><br>
  If you redefine </span><tt><span style='font-size:10.0pt;color:black'>equals</span></tt><span
  style='font-size:8.5pt;color:black'> in a subclass, include a call to </span><span
  class=SpellE><span class=GramE><tt><span style='font-size:10.0pt;color:black'>super.equals</span></tt></span></span><span
  class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
  style='font-size:10.0pt;color:black'>other)</span></tt><span
  style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal>Tip:</p>

<p class=doctext><a name="have_fields"></a><a name=iddle1918></a><a
name=iddle1865></a><a name=iddle1855></a><span style='font-size:8.5pt;
color:black'>If you have fields of array type, you can use the static </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>Arrays.equals</span></tt></span><a
name="method_to"></a><span style='font-size:8.5pt;color:black'> method to check
that corresponding array elements are equal.<o:p></o:p></span></p>

<p class=MsoNormal>Caution:</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=doctext><a name="a_common"></a><span style='font-size:8.5pt;
color:black'>Here is a common mistake when implementing the </span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>equals</span></tt></span><a
name="you_spot"></a><span style='font-size:8.5pt;color:black'> method. Can you
spot the problem?<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>public</span></span><span
style='color:black'> class Employee<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span><span
class=GramE>public</span> <span class=SpellE>boolean</span> equals(Employee other)<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>{<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>return</span> <span class=SpellE>name.equals</span>(<span
class=SpellE>other.name</span>)<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>         </span>&amp;&amp; <span
class=GramE>salary</span> == <span class=SpellE>other.salary</span><o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>         </span>&amp;&amp; <span
class=SpellE><span class=GramE>hireDay.equals</span></span><span class=GramE>(</span><span
class=SpellE>other.hireDay</span>);<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>...<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="the_explicit"></a><span style='font-size:8.5pt;
color:black'>This method declares the explicit parameter type as </span><tt><span
style='font-size:10.0pt;color:black'>Employee</span></tt><span
style='font-size:8.5pt;color:black'>. As a result, it does not override the </span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>equals</span></tt></span><span
style='font-size:8.5pt;color:black'> method of the </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><a
name="unrelated_method"></a><span style='font-size:8.5pt;color:black'> class
but defines a completely unrelated method.<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>Starting with <span
class=doctexthighlight2>Java</span><a name="against_this"></a> SE 5.0, you can
protect yourself against this type of error by tagging methods that are
intended to override <span class=SpellE>superclass</span> methods with </span><tt><span
style='font-size:10.0pt;color:black'>@Override</span></tt><span
style='font-size:8.5pt;color:black'>:<o:p></o:p></span></p>

<pre><span style='color:black'>@Override public <span class=SpellE>boolean</span> <span
class=GramE>equals(</span>Object other)<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="a_new"></a><span style='font-size:8.5pt;color:black'>If
you made a mistake and you are defining a new method, the compiler reports an
error. For example, suppose you add the following declaration to the </span><tt><span
style='font-size:10.0pt;color:black'>Employee</span></tt><span
style='font-size:8.5pt;color:black'> class:<o:p></o:p></span></p>

<pre><span style='color:black'>@Override public <span class=SpellE>boolean</span> <span
class=GramE>equals(</span>Employee other)<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="override_any"></a><span style='font-size:8.5pt;
color:black'>An error is reported because this method doesn't override any
method from the </span><tt><span style='font-size:10.0pt;color:black'>Object</span></tt><span
style='font-size:8.5pt;color:black'> <span class=SpellE>superclass</span>.<o:p></o:p></span></p>

<h2><span class=SpellE><tt><span style='font-size:10.0pt'>java.util.Arrays</span></tt></span>
1.2<span style='font-size:11.5pt;color:#6D7288'><o:p></o:p></span></h2>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo2;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><tt><span style='font-size:10.0pt;color:black'>static
<span class=SpellE>boolean</span> equals(</span></tt><span class=docemphasis><span
style='font-size:8.5pt;color:black'>type</span></span><tt><span
style='font-size:10.0pt;color:black'>[] a,</span></tt><span style='font-size:
8.5pt;color:black'> <span class=docemphasis>type</span></span><tt><span
style='font-size:10.0pt;color:black'>[] b)</span></tt><span style='font-size:
8.5pt;color:black'> <span class=docemphboldalt>5.0</span><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><span class=GramE><span
style='font-size:8.5pt;color:black'>returns</span></span><span
style='font-size:8.5pt;color:black'> </span><tt><span style='font-size:10.0pt;
color:black'>true</span></tt><a name="arrays_have"></a><span style='font-size:
8.5pt;color:black'> if the arrays have equal lengths and equal elements in
corresponding positions. The arrays can have component types </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><span style='font-size:
8.5pt;color:black'>, </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>int</span></tt></span><span style='font-size:8.5pt;color:black'>, </span><tt><span
style='font-size:10.0pt;color:black'>long</span></tt><span style='font-size:
8.5pt;color:black'>, </span><tt><span style='font-size:10.0pt;color:black'>short</span></tt><span
style='font-size:8.5pt;color:black'>, </span><tt><span style='font-size:10.0pt;
color:black'>char</span></tt><span style='font-size:8.5pt;color:black'>, </span><tt><span
style='font-size:10.0pt;color:black'>byte</span></tt><span style='font-size:
8.5pt;color:black'>, </span><span class=SpellE><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>boolean</span></tt></span></span><span
style='font-size:8.5pt;color:black'>, </span><tt><span style='font-size:10.0pt;
color:black'>float</span></tt><a name=or></a><span style='font-size:8.5pt;
color:black'>, or </span><tt><span style='font-size:10.0pt;color:black'>double</span></tt><span
style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>

<h4><span class=GramE><span style='color:windowtext'>The <span
style='mso-spacerun:yes'> </span></span><span class=SpellE><tt><span
style='font-size:10.0pt;color:windowtext'>hashCode</span></tt></span></span><span
style='color:windowtext'> Method<o:p></o:p></span></h4>

<p class=doctext><a name="code_is"></a><span style='font-size:8.5pt;color:black'>A
hash code is an integer that is derived from an object. Hash codes should be
scrambled—if </span><tt><span style='font-size:10.0pt;color:black'>x</span></tt><span
style='font-size:8.5pt;color:black'> and </span><tt><span style='font-size:
10.0pt;color:black'>y</span></tt><a name="two_distinct"></a><span
style='font-size:8.5pt;color:black'> are two distinct objects, there should be
a high probability that </span><span class=SpellE><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>x.hashCode</span></tt></span></span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>)</span></tt><span style='font-size:8.5pt;
color:black'> and </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>y.hashCode</span></tt></span><tt><span style='font-size:10.0pt;
color:black'>()</span></tt><span style='font-size:8.5pt;color:black'> are
different. <a href="javascript:moveTo('ch05table01');">Table 5–1</a><a
name="examples_of"></a> lists a few examples of hash codes that result from the
</span><span class=SpellE><tt><span style='font-size:10.0pt;color:black'>hashCode</span></tt></span><span
style='font-size:8.5pt;color:black'> method of the </span><tt><span
style='font-size:10.0pt;color:black'>String</span></tt><span style='font-size:
8.5pt;color:black'> class.<o:p></o:p></span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='mso-cellspacing:0in;mso-padding-alt:3.75pt 3.75pt 3.75pt 3.75pt'>
 <thead>
  <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
   <td colspan=2 style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
   <h5 align=center style='text-align:center'><span class=GramE>Table 5–1.</span>
   Hash Codes Resulting from the <span class=SpellE><tt><span style='font-size:
   10.0pt'>hashCode</span></tt></span> Function</h5>
   </td>
  </tr>
  <tr style='mso-yfti-irow:1'>
   <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
   <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>String<o:p></o:p></span></b></p>
   </td>
   <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
   <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>Hash Code<o:p></o:p></span></b></p>
   </td>
  </tr>
 </thead>
 <tr style='mso-yfti-irow:2'>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><tt><span style='font-size:10.0pt;color:black'>Hello</span></tt><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'>69609650<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><tt><span style='font-size:10.0pt;color:black'>Harry</span></tt><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'>69496448<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><tt><span style='font-size:10.0pt;color:black'>Hacker</span></tt><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'>–2141031506<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><tt><span
style='font-size:10.0pt;color:black'>String</span></tt><a name="compute_the"></a><span
style='font-size:8.5pt;color:black'> class uses the following algorithm to
compute the hash code:<o:p></o:p></span></p>

<pre><span class=SpellE><span class=GramE><span style='color:black'>int</span></span></span><span
style='color:black'> hash = 0;<o:p></o:p></span></pre><pre><span class=GramE><span
style='color:black'>for</span></span><span style='color:black'> (<span
class=SpellE>int</span> <span class=SpellE>i</span> = 0; <span class=SpellE>i</span> &lt; length(); <span
class=SpellE>i</span>++)<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span><span
class=GramE>hash</span> = 31 * hash + <span class=SpellE>charAt</span>(<span
class=SpellE>i</span>);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>hashCode</span></tt></span><span
style='font-size:8.5pt;color:black'> method is defined in the </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><a name="hash_code"></a><span
style='font-size:8.5pt;color:black'> class. Therefore, every object has a
default hash code. That hash code is derived from the object's memory address.
Consider this example:<o:p></o:p></span></p>

<pre><span style='color:black'>String s = &quot;Ok&quot;;<o:p></o:p></span></pre><pre><span
class=SpellE><span style='color:black'>StringBuilder</span></span><span
style='color:black'> <span class=SpellE>sb</span> = new <span class=SpellE>StringBuilder</span>(s);<o:p></o:p></span></pre><pre><span
class=SpellE><span class=GramE><span style='color:black'>System.out.println</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span class=SpellE><span
style='color:black'>s.hashCode</span></span><span style='color:black'>() + &quot; &quot; + <span
class=SpellE>sb.hashCode</span>());<o:p></o:p></span></pre><pre><span
style='color:black'>String t = new <span class=GramE>String(</span>&quot;Ok&quot;);<o:p></o:p></span></pre><pre><span
class=SpellE><span style='color:black'>StringBuilder</span></span><span
style='color:black'> <span class=SpellE>tb</span> = new <span class=SpellE><span
class=GramE>StringBuilder</span></span><span class=GramE>(</span>t);<o:p></o:p></span></pre><pre><span
class=SpellE><span class=GramE><span style='color:black'>System.out.println</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span class=SpellE><span
style='color:black'>t.hashCode</span></span><span style='color:black'>() + &quot; &quot; + <span
class=SpellE>tb.hashCode</span>());<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'><a
href="javascript:moveTo('ch05table02');">Table 5–2</a> shows the result.<o:p></o:p></span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='mso-cellspacing:0in;mso-padding-alt:3.75pt 3.75pt 3.75pt 3.75pt'>
 <thead>
  <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
   <td colspan=2 style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
   <h5 align=center style='text-align:center'><a name="and_String"></a><span
   class=GramE>Table 5–2.</span> Hash Codes of Strings and String Builders</h5>
   </td>
  </tr>
  <tr style='mso-yfti-irow:1'>
   <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
   <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>Object<o:p></o:p></span></b></p>
   </td>
   <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
   <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>Hash Code<o:p></o:p></span></b></p>
   </td>
  </tr>
 </thead>
 <tr style='mso-yfti-irow:2'>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><tt><span style='font-size:10.0pt;color:black'>s</span></tt><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'>2556<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span class=SpellE><tt><span style='font-size:10.0pt;
  color:black'>sb</span></tt></span><span style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'>20526976<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><tt><span style='font-size:10.0pt;color:black'>t</span></tt><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'>2556<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;mso-yfti-lastrow:yes'>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span class=SpellE><tt><span style='font-size:10.0pt;
  color:black'>tb</span></tt></span><span style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:3.75pt 3.75pt 3.75pt 3.75pt'>
  <p class=MsoNormal><span style='font-size:8.5pt;color:black'>20527144<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>Note that the
strings </span><tt><span style='font-size:10.0pt;color:black'>s</span></tt><span
style='font-size:8.5pt;color:black'> and </span><tt><span style='font-size:
10.0pt;color:black'>t</span></tt><a name="are_derived"></a><span
style='font-size:8.5pt;color:black'> have the same hash code because, for
strings, the hash codes are derived from their <span class=docemphasis>contents.</span>
The string <span class=GramE>builders</span> </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>sb</span></tt></span><span
style='font-size:8.5pt;color:black'> and </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>tb</span></tt></span><span
style='font-size:8.5pt;color:black'> have different hash codes because no </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>hashCode</span></tt></span><span
style='font-size:8.5pt;color:black'> method has been defined for the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>StringBuilder</span></tt></span><span
style='font-size:8.5pt;color:black'> class, and the default </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>hashCode</span></tt></span><span
style='font-size:8.5pt;color:black'> method in the </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><a name="memory_address"></a><span
style='font-size:8.5pt;color:black'> class derives the hash code from the
object's memory address.<o:p></o:p></span></p>

<p class=doctext><a name="redefine_the"></a><span style='font-size:8.5pt;
color:black'>If you redefine the </span><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt></span><a name="you_will"></a><span
style='font-size:8.5pt;color:black'> method, you will also need to redefine the
</span><span class=SpellE><tt><span style='font-size:10.0pt;color:black'>hashCode</span></tt></span><a
name="objects_that"></a><span style='font-size:8.5pt;color:black'> method for
objects that users might insert into a hash table. (We discuss hash tables in <a
href="http://proquestcombo.safaribooksonline.com/9780132354769/ch13#ch13">Chapter
13</a>.)<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>hashCode</span></tt></span><a
name="should_return"></a><span style='font-size:8.5pt;color:black'> method
should return an integer (which can be negative). Just combine the hash codes
of the instance fields so that the hash codes for different objects are likely
to be widely scattered.<o:p></o:p></span></p>

<p class=doctext><a name=a></a><span style='font-size:8.5pt;color:black'>For
example, here is a </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>hashCode</span></tt></span><span style='font-size:8.5pt;
color:black'> method for the </span><tt><span style='font-size:10.0pt;
color:black'>Employee</span></tt><span style='font-size:8.5pt;color:black'>
class:<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>class</span></span><span
style='color:black'> Employee<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span><span
class=GramE>public</span> <span class=SpellE>int</span> <span class=SpellE>hashCode</span>()<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>{<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>return</span> 7 * <span class=SpellE>name.hashCode</span>()<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>         </span>+ 11 * new <span
class=GramE>Double(</span>salary).<span class=SpellE>hashCode</span>()<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>         </span>+ 13 * <span
class=SpellE><span class=GramE>hireDay.hashCode</span></span><span class=GramE>(</span>);<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>. . .<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name=iddle2694></a><a name=iddle2210></a><a name=iddle2162></a><span
style='font-size:8.5pt;color:black'>Your definitions of </span><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt><span style='font-size:
8.5pt;color:black'> and </span><span class=SpellE><tt><span style='font-size:
10.0pt;color:black'>hashCode</span></tt></span><span style='font-size:8.5pt;
color:black'> must be compatible: if </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>x.equals</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>(y)</span></tt><span style='font-size:
8.5pt;color:black'> is true, then </span><span class=SpellE><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>x.hashCode</span></tt></span></span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>)</span></tt><span style='font-size:8.5pt;
color:black'> must be the same value as </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>y.hashCode</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>()</span></tt><span style='font-size:8.5pt;
color:black'>. For example, if you define </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>Employee.equals</span></tt></span><span
style='font-size:8.5pt;color:black'> to compare employee IDs, then the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>hashCode</span></tt></span><a
name="employee_names"></a><span style='font-size:8.5pt;color:black'> method
needs to hash the IDs, not employee names or memory addresses.<o:p></o:p></span></p>

<p class=docnotetitle><a name=ch05note23></a><span style='font-size:8.5pt;
color:black'>Tip<o:p></o:p></span></p>

<p class=doctext><a name="array_type"></a><span style='font-size:8.5pt;
color:black'>If you have fields of array type, you can use the static </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>Arrays.hashCode</span></tt></span><a
name="code_that"></a><span style='font-size:8.5pt;color:black'> method to
compute a hash code that is composed of the hash codes of the array elements.<o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h2><span class=SpellE><tt><span style='font-size:10.0pt'>java.lang.Object</span></tt></span>
1.0<span style='font-size:11.5pt;color:#6D7288'><o:p></o:p></span></h2>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo3;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span class=SpellE><tt><span style='font-size:
10.0pt;color:black'>int</span></tt></span><tt><span style='font-size:10.0pt;
color:black'> <span class=SpellE>hashCode</span>()</span></tt><span
style='font-size:8.5pt;color:black'><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><a name="can_be"></a><span
class=GramE><span style='font-size:8.5pt;color:black'>returns</span></span><span
style='font-size:8.5pt;color:black'> a hash code for this object. A hash code
can be any integer, positive or negative. Equal objects need to return
identical hash codes.<o:p></o:p></span></p>

<h2><span class=SpellE><tt><span style='font-size:10.0pt'>java.util.Arrays</span></tt></span>
1.2<span style='font-size:11.5pt;color:#6D7288'><o:p></o:p></span></h2>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo4;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><tt><span style='font-size:10.0pt;color:black'>static
<span class=SpellE>int</span> <span class=SpellE>hashCode</span>(</span></tt><span
class=docemphasis><span style='font-size:8.5pt;color:black'>type</span></span><tt><span
style='font-size:10.0pt;color:black'>[] a)</span></tt><span style='font-size:
8.5pt;color:black'> <span class=docemphboldalt>5.0</span><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><span class=GramE><span
style='font-size:8.5pt;color:black'>computes</span></span><span
style='font-size:8.5pt;color:black'> the hash code of the array </span><tt><span
style='font-size:10.0pt;color:black'>a</span></tt><span style='font-size:8.5pt;
color:black'>, which can have component type </span><tt><span style='font-size:
10.0pt;color:black'>Object</span></tt><span style='font-size:8.5pt;color:black'>,
</span><span class=SpellE><tt><span style='font-size:10.0pt;color:black'>int</span></tt></span><span
style='font-size:8.5pt;color:black'>, </span><tt><span style='font-size:10.0pt;
color:black'>long</span></tt><span style='font-size:8.5pt;color:black'>, </span><tt><span
style='font-size:10.0pt;color:black'>short</span></tt><span style='font-size:
8.5pt;color:black'>, </span><tt><span style='font-size:10.0pt;color:black'>char</span></tt><span
style='font-size:8.5pt;color:black'>, </span><tt><span style='font-size:10.0pt;
color:black'>byte</span></tt><span style='font-size:8.5pt;color:black'>, </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>boolean</span></tt></span><span
style='font-size:8.5pt;color:black'>, </span><tt><span style='font-size:10.0pt;
color:black'>float</span></tt><span style='font-size:8.5pt;color:black'>, or </span><tt><span
style='font-size:10.0pt;color:black'>double</span></tt><span style='font-size:
8.5pt;color:black'>.<o:p></o:p></span></p>

<h4>The <span class=SpellE><tt><span style='font-size:10.0pt'>toString</span></tt></span>
Method</h4>

<p class=doctext><span style='font-size:8.5pt;color:black'>Another important
method in </span><tt><span style='font-size:10.0pt;color:black'>Object</span></tt><span
style='font-size:8.5pt;color:black'> is the </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="value_of"></a><span style='font-size:8.5pt;color:black'> method that
returns a string representing the value of this object. Here is a typical
example. The </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>toString</span></tt></span><span style='font-size:8.5pt;
color:black'> method of the </span><tt><span style='font-size:10.0pt;
color:black'>Point</span></tt><a name="class_returns"></a><span
style='font-size:8.5pt;color:black'> class returns a string like this:<o:p></o:p></span></p>

<pre><span class=SpellE><span style='color:black'>java.awt.Point</span></span><span
style='color:black'>[x=10<span class=GramE>,y</span>=20]<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>Most (but not all) </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="this_format"></a><span style='font-size:8.5pt;color:black'> methods
follow this format: the name of the class, followed by the field values
enclosed in square brackets. Here is an implementation of the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="for_the"></a><span style='font-size:8.5pt;color:black'> method for the </span><tt><span
style='font-size:10.0pt;color:black'>Employee</span></tt><span
style='font-size:8.5pt;color:black'> class:<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>public</span></span><span
style='color:black'> String <span class=SpellE>toString</span>()<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span><span
class=GramE>return</span> &quot;Employee[name=&quot; + name<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>+ &quot;<span
class=GramE>,salary</span>=&quot; + salary<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>+ &quot;<span
class=GramE>,<span class=SpellE>hireDay</span></span>=&quot; + <span
class=SpellE>hireDay</span><o:p></o:p></span></pre><pre><span style='color:
black'><span style='mso-spacerun:yes'>      </span>+ &quot;]&quot;;<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="a_little"></a><span style='font-size:8.5pt;
color:black'>Actually, you can do a little better. Rather than hardwiring the
class name into the </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>toString</span></tt></span><span style='font-size:8.5pt;
color:black'> method, call </span><span class=SpellE><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>getClass</span></tt></span></span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>).<span class=SpellE>getName</span>()</span></tt><a
name="class_name"></a><span style='font-size:8.5pt;color:black'> to obtain a
string with the class name.<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>public</span></span><span
style='color:black'> String <span class=SpellE>toString</span>()<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span><span
class=GramE>return</span> <span class=SpellE>getClass</span>().<span
class=SpellE>getName</span>()<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>+ &quot;[name=&quot; + name<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>+ &quot;<span
class=GramE>,salary</span>=&quot; + salary<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>+ &quot;<span
class=GramE>,<span class=SpellE>hireDay</span></span>=&quot; + <span
class=SpellE>hireDay</span><o:p></o:p></span></pre><pre><span style='color:
black'><span style='mso-spacerun:yes'>     </span><span style='mso-spacerun:yes'> </span>+ &quot;]&quot;;<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><span
style='font-size:8.5pt;color:black'> method then also works for subclasses.<o:p></o:p></span></p>

<p class=doctext><a name="define_its"></a><span style='font-size:8.5pt;
color:black'>Of course, the subclass programmer should define its own </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="If_the"></a><span style='font-size:8.5pt;color:black'> method and add the
subclass fields. If the <span class=SpellE>superclass</span> uses </span><span
class=SpellE><span class=GramE><tt><span style='font-size:10.0pt;color:black'>getClass</span></tt></span></span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>).<span class=SpellE>getName</span>()</span></tt><span
style='font-size:8.5pt;color:black'>, then the subclass can simply call </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>super.toString</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>()</span></tt><span style='font-size:8.5pt;
color:black'>. For example, here is a </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>toString</span></tt></span><span
style='font-size:8.5pt;color:black'> method for the </span><tt><span
style='font-size:10.0pt;color:black'>Manager</span></tt><span style='font-size:
8.5pt;color:black'> class:<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>class</span></span><span
style='color:black'> Manager extends Employee<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>. . .<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span><span class=GramE>public</span> String <span
class=SpellE>toString</span>()<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>{<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>return</span> <span class=SpellE>super.toString</span>()<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>        </span>+ &quot;[bonus=&quot; + bonus<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>        </span>+ &quot;]&quot;;<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>Now a </span><tt><span
style='font-size:10.0pt;color:black'>Manager</span></tt><span style='font-size:
8.5pt;color:black'> object is printed as<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>Manager[</span></span><span
style='color:black'>name=...,salary=...,<span class=SpellE>hireDay</span>=...][bonus=...]<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="is_concatenated"></a><span style='font-size:8.5pt;color:black'> method is
ubiquitous for an important reason: whenever an object is concatenated with a
string by the &quot;+&quot; operator, the <span class=doctexthighlight2>Java</span>
compiler automatically invokes the </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="the_object"></a><span style='font-size:8.5pt;color:black'> method to
obtain a string representation of the object. For example:<o:p></o:p></span></p>

<pre><span style='color:black'>Point p = new <span class=GramE>Point(</span>10, 20);<o:p></o:p></span></pre><pre><span
style='color:black'>String message = &quot;The current position <span
class=GramE>is &quot;</span> + p;<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>// automatically invokes <span
class=SpellE><span class=GramE>p.toString</span></span><span class=GramE>()</span><o:p></o:p></span></pre>

<p class=doctext><span style='font-size:8.5pt;color:black'>If </span><tt><span
style='font-size:10.0pt;color:black'>x</span></tt><span style='font-size:8.5pt;
color:black'> is any object and you call<o:p></o:p></span></p>

<pre><span class=SpellE><span style='color:black'>System.out.println</span></span><span
style='color:black'>(x);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span class=GramE><span style='font-size:8.5pt;color:black'>then</span></span><span
style='font-size:8.5pt;color:black'> the </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>println</span></tt></span><span
style='font-size:8.5pt;color:black'> method simply calls </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>x.toString</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>()</span></tt><span style='font-size:8.5pt;
color:black'> and prints the resulting string.<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><span style='font-size:
8.5pt;color:black'> class defines the </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="and_the"></a><span style='font-size:8.5pt;color:black'> method to print
the class name and the hash code of the object. For example, the call<o:p></o:p></span></p>

<pre><span class=SpellE><span class=GramE><span style='color:black'>System.out.println</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span class=SpellE><span
style='color:black'>System.out</span></span><span style='color:black'>)<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="like_this"></a><span class=GramE><span
style='font-size:8.5pt;color:black'>produces</span></span><span
style='font-size:8.5pt;color:black'> an output that looks like this:<o:p></o:p></span></p>

<pre><span style='color:black'>java.io.PrintStream@2f6684<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="implementor_of"></a><span style='font-size:8.5pt;
color:black'>The reason is that the <span class=SpellE>implementor</span> of
the </span><span class=SpellE><tt><span style='font-size:10.0pt;color:black'>PrintStream</span></tt></span><span
style='font-size:8.5pt;color:black'> class didn't bother to override the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><span
style='font-size:8.5pt;color:black'> method.<o:p></o:p></span></p>

<p class=docnotetitle><a name=ch05note25></a><span style='font-size:8.5pt;
color:black'>Caution<o:p></o:p></span></p>

<p class=doctext><a name=iddle3196></a><a name=iddle1600></a><span
style='font-size:8.5pt;color:black'>Annoyingly, arrays inherit the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><span
style='font-size:8.5pt;color:black'> method from </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><a name="printed_in"></a><span
style='font-size:8.5pt;color:black'>, with the added twist that the array type
is printed in an archaic format. For example,<o:p></o:p></span></p>

<pre><span class=SpellE><span class=GramE><span style='color:black'>int</span></span></span><span
class=GramE><span style='color:black'>[</span></span><span style='color:black'>] <span
class=SpellE>luckyNumbers</span> = { 2, 3, 5, 7, 11, 13 };<o:p></o:p></span></pre><pre><span
style='color:black'>String s = &quot;&quot; + <span class=SpellE>luckyNumbers</span>;<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span class=GramE><span style='font-size:8.5pt;color:black'>yields</span></span><span
style='font-size:8.5pt;color:black'> the string </span><tt><span
style='font-size:10.0pt;color:black'>&quot;[I@1a46e30&quot;</span></tt><span
style='font-size:8.5pt;color:black'>. (The prefix </span><tt><span
style='font-size:10.0pt;color:black'>[I</span></tt><a name="to_call"></a><span
style='font-size:8.5pt;color:black'> <span class=GramE>denotes</span> an array
of integers.) The remedy is to call the static </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>Arrays.toString</span></tt></span><span
style='font-size:8.5pt;color:black'> method instead. The code<o:p></o:p></span></p>

<pre><span style='color:black'>String s = <span class=SpellE><span class=GramE>Arrays.toString</span></span><span
class=GramE>(</span><span class=SpellE>luckyNumbers</span>);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name=string></a><span class=GramE><span style='font-size:
8.5pt;color:black'>yields</span></span><span style='font-size:8.5pt;color:black'>
the string </span><tt><span style='font-size:10.0pt;color:black'>&quot;[2, 3,
5, 7, 11, 13]&quot;</span></tt><span style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>

<p class=doctext><a name="To_correctly"></a><span class=GramE><span
style='font-size:8.5pt;color:black'>To correctly print multidimensional arrays
(that is, arrays of arrays), use </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>Arrays.deepToString</span></tt></span><span
style='font-size:8.5pt;color:black'>.</span></span><span style='font-size:8.5pt;
color:black'><o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="a_great"></a><span style='font-size:8.5pt;color:black'> method is a great
tool for logging. Many classes in the standard class library define the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>toString</span></tt></span><a
name="so_that"></a><span style='font-size:8.5pt;color:black'> method so that
you can get useful information about the state of an object. This is
particularly useful in logging messages like this:<o:p></o:p></span></p>

<pre><span class=SpellE><span class=GramE><span style='color:black'>System.out.println</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span style='color:black'>&quot;Current position = &quot; + position);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name=in></a><span style='font-size:8.5pt;color:black'>As we
explain in <a
href="http://proquestcombo.safaribooksonline.com/9780132354769/ch11#ch11">Chapter
11</a>, an even better solution is<o:p></o:p></span></p>

<pre><span class=SpellE><span class=GramE><span style='color:black'>Logger.global.info</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span style='color:black'>&quot;Current position = &quot; + position);<o:p></o:p></span></pre>

<p class=MsoNormal><a name=ch05note26></a><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=docnotetitle><span style='font-size:8.5pt;color:black'>Tip<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>We strongly
recommend that you add a </span><span class=SpellE><tt><span style='font-size:
10.0pt;color:black'>toString</span></tt></span><a name="you_write"></a><span
style='font-size:8.5pt;color:black'> method to each class that you write. You,
as well as other programmers who use your classes, will be grateful for the
logging support.<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The program in <a
href="javascript:moveTo('ch05ex03');">Listing 5–3</a> implements the </span><tt><span
style='font-size:10.0pt;color:black'>equals</span></tt><span style='font-size:
8.5pt;color:black'>, </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>hashCode</span></tt></span><span style='font-size:8.5pt;
color:black'>, and </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>toString</span></tt></span><span style='font-size:8.5pt;
color:black'> methods for the </span><tt><span style='font-size:10.0pt;
color:black'>Employee</span></tt><span style='font-size:8.5pt;color:black'> and
</span><tt><span style='font-size:10.0pt;color:black'>Manager</span></tt><span
style='font-size:8.5pt;color:black'> classes.<o:p></o:p></span></p>

<h5><a name=ch05ex03></a><span class=GramE>Listing 5–3.</span> <span
class=SpellE>EqualsTest.java</span><span style='font-size:8.5pt;color:#1F3247'><o:p></o:p></span></h5>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<pre><span style='mso-spacerun:yes'> </span><span style='color:black'><span style='mso-spacerun:yes'> </span>1. <span
class=GramE>import</span> <span class=SpellE>java.util</span>.*;<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span>2.<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span>3. /**<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span>4.<span style='mso-spacerun:yes'>  </span>* This program demonstrates the <span
class=GramE>equals</span> method.<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span>5.<span style='mso-spacerun:yes'>  </span>* @version 1.11 2004-02-21<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span>6.<span style='mso-spacerun:yes'>  </span>* @author Cay <span
class=SpellE>Horstmann</span><o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span>7.<span style='mso-spacerun:yes'>  </span>*/<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span>8. <span
class=GramE>public</span> class <span class=SpellE>EqualsTest</span><o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span>9. {<o:p></o:p></span></pre><pre><span
style='color:black'> 10.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> static void main(String[] <span class=SpellE>args</span>)<o:p></o:p></span></pre><pre><span
style='color:black'> 11.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 12.<span style='mso-spacerun:yes'>       </span>Employee alice1 = new <span
class=GramE>Employee(</span>&quot;Alice Adams&quot;, 75000, 1987, 12, 15);<o:p></o:p></span></pre><pre><span
style='color:black'> 13.<span style='mso-spacerun:yes'>       </span>Employee alice2 = alice1;<o:p></o:p></span></pre><pre><span
style='color:black'> 14.<span style='mso-spacerun:yes'>       </span>Employee alice3 = new <span
class=GramE>Employee(</span>&quot;Alice Adams&quot;, 75000, 1987, 12, 15);<o:p></o:p></span></pre><pre><span
style='color:black'> 15.<span style='mso-spacerun:yes'>       </span>Employee bob = new <span
class=GramE>Employee(</span>&quot;Bob <span class=SpellE>Brandson</span>&quot;, 50000, 1989, 10, 1);<o:p></o:p></span></pre><pre><span
style='color:black'> 16.<o:p></o:p></span></pre><pre><span style='color:black'> 17.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;alice1 == alice2: &quot; + (alice1 == alice2));<o:p></o:p></span></pre><pre><span
style='color:black'> 18.<o:p></o:p></span></pre><pre><span style='color:black'> 19.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;alice1 == alice3: &quot; + (alice1 == alice3));<o:p></o:p></span></pre><pre><span
style='color:black'> 20.<o:p></o:p></span></pre><pre><span style='color:black'> 21.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;alice1.equals(alice3): &quot; + alice1.equals(alice3));<o:p></o:p></span></pre><pre><span
style='color:black'> 22.<o:p></o:p></span></pre><pre><span style='color:black'> 23.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;alice1.equals(bob): &quot; + alice1.equals(bob));<o:p></o:p></span></pre><pre><span
style='color:black'> 24.<o:p></o:p></span></pre><pre><span style='color:black'> 25.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;<span class=SpellE>bob.toString</span>(): &quot; + bob);<o:p></o:p></span></pre><pre><span
style='color:black'> 26.<o:p></o:p></span></pre><pre><span style='color:black'> 27.<span style='mso-spacerun:yes'>       </span>Manager <span
class=SpellE>carl</span> = new <span class=GramE>Manager(</span>&quot;Carl Cracker&quot;, 80000, 1987, 12, 15);<o:p></o:p></span></pre><pre><span
style='color:black'> 28.<span style='mso-spacerun:yes'>       </span>Manager boss = new <span
class=GramE>Manager(</span>&quot;Carl Cracker&quot;, 80000, 1987, 12, 15);<o:p></o:p></span></pre><pre><span
style='color:black'> 29.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>boss.setBonus</span></span><span class=GramE>(</span>5000);<o:p></o:p></span></pre><pre><span
style='color:black'> 30.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;<span class=SpellE>boss.toString</span>(): &quot; + boss);<o:p></o:p></span></pre><pre><span
style='color:black'> 31.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;<span class=SpellE>carl.equals</span>(boss): &quot; + <span
class=SpellE>carl.equals</span>(boss));<o:p></o:p></span></pre><pre><span
style='color:black'> 32.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;alice1.hashCode(): &quot; + alice1.hashCode());<o:p></o:p></span></pre><pre><span
style='color:black'> 33.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;alice3.hashCode(): &quot; + alice3.hashCode());<o:p></o:p></span></pre><pre><span
style='color:black'> 34.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;<span class=SpellE>bob.hashCode</span>(): &quot; + <span
class=SpellE>bob.hashCode</span>());<o:p></o:p></span></pre><pre><span
style='color:black'> 35.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;<span class=SpellE>carl.hashCode</span>(): &quot; + <span
class=SpellE>carl.hashCode</span>());<o:p></o:p></span></pre><pre><span
style='color:black'> 36.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'> 37<span class=GramE>. }</span><o:p></o:p></span></pre><pre><span
style='color:black'> 38.<o:p></o:p></span></pre><pre><span style='color:black'> 39. <span
class=GramE>class</span> Employee<o:p></o:p></span></pre><pre><span
style='color:black'> 40. {<o:p></o:p></span></pre><pre><span style='color:black'> 41.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> Employee(String n, double s, <span class=SpellE>int</span> year, <span
class=SpellE>int</span> month, <span class=SpellE>int</span> day)<o:p></o:p></span></pre><pre><span
style='color:black'> 42.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 43.<span style='mso-spacerun:yes'>       </span><span
class=GramE>name</span> = n;<o:p></o:p></span></pre><pre><span
style='color:black'> 44.<span style='mso-spacerun:yes'>       </span><span
class=GramE>salary</span> = s;<o:p></o:p></span></pre><pre><span
style='color:black'> 45.<span style='mso-spacerun:yes'>       </span><span
class=SpellE>GregorianCalendar</span> calendar = new <span class=SpellE><span
class=GramE>GregorianCalendar</span></span><span class=GramE>(</span>year, month - 1, day);<o:p></o:p></span></pre><pre><span
style='color:black'> 46.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>hireDay</span></span> = <span class=SpellE>calendar.getTime</span>();<o:p></o:p></span></pre><pre><span
style='color:black'> 47.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'> 48.<o:p></o:p></span></pre><pre><span style='color:black'> 49.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> String <span class=SpellE>getName</span>()<o:p></o:p></span></pre><pre><span
style='color:black'> 50.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 51.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> name;<o:p></o:p></span></pre><pre><span
style='color:black'> 52.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'> 53.<o:p></o:p></span></pre><pre><span style='color:black'> 54.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> double <span class=SpellE>getSalary</span>()<o:p></o:p></span></pre><pre><span
style='color:black'> 55.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 56.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> salary;<o:p></o:p></span></pre><pre><span
style='color:black'> 57.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'> 58.<o:p></o:p></span></pre><pre><span style='color:black'> 59.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> Date <span class=SpellE>getHireDay</span>()<o:p></o:p></span></pre><pre><span
style='color:black'> 60.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 61.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> <span class=SpellE>hireDay</span>;<o:p></o:p></span></pre><pre><span
style='color:black'> 62.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'> 63.<o:p></o:p></span></pre><pre><span style='color:black'> 64.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> void <span class=SpellE>raiseSalary</span>(double <span
class=SpellE>byPercent</span>)<o:p></o:p></span></pre><pre><span
style='color:black'> 65.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 66.<span style='mso-spacerun:yes'>       </span><span
class=GramE>double</span> raise = salary * <span class=SpellE>byPercent</span> / 100;<o:p></o:p></span></pre><pre><span
style='color:black'> 67.<span style='mso-spacerun:yes'>       </span><span
class=GramE>salary</span> += raise;<o:p></o:p></span></pre><pre><span
style='color:black'> 68.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'> 69.<o:p></o:p></span></pre><pre><span style='color:black'> 70.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> <span class=SpellE>boolean</span> equals(Object <span
class=SpellE>otherObject</span>)<o:p></o:p></span></pre><pre><span
style='color:black'> 71.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 72.<span style='mso-spacerun:yes'>       </span>// a quick test to see if the objects are identical<o:p></o:p></span></pre><pre><span
style='color:black'> 73.<span style='mso-spacerun:yes'>       </span><span
class=GramE>if</span> (this == <span class=SpellE>otherObject</span>) return true;<o:p></o:p></span></pre><pre><span
style='color:black'> 74.<o:p></o:p></span></pre><pre><span style='color:black'> 75.<span style='mso-spacerun:yes'>       </span>// must return false if the explicit parameter is null<o:p></o:p></span></pre><pre><span
style='color:black'> 76.<span style='mso-spacerun:yes'>       </span><span
class=GramE>if</span> (<span class=SpellE>otherObject</span> == null) return false;<o:p></o:p></span></pre><pre><span
style='color:black'> 77.<o:p></o:p></span></pre><pre><span style='color:black'> 78.<span style='mso-spacerun:yes'>       </span>// if the classes don't match, they can't be equal<o:p></o:p></span></pre><pre><span
style='color:black'> 79.<span style='mso-spacerun:yes'>       </span><span
class=GramE>if</span> (<span class=SpellE>getClass</span>() != <span
class=SpellE>otherObject.getClass</span>()) return false;<o:p></o:p></span></pre><pre><span
style='color:black'> 80.<o:p></o:p></span></pre><pre><span style='color:black'> 81.<span style='mso-spacerun:yes'>       </span>// now we know <span
class=SpellE>otherObject</span> is a non-null Employee<o:p></o:p></span></pre><pre><span
style='color:black'> 82.<span style='mso-spacerun:yes'>       </span>Employee other = (Employee) <span
class=SpellE>otherObject</span>;<o:p></o:p></span></pre><pre><span
style='color:black'> 83.<o:p></o:p></span></pre><pre><span style='color:black'> 84.<span style='mso-spacerun:yes'>       </span>// test whether the fields have identical values<o:p></o:p></span></pre><pre><span
style='color:black'> 85.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> <span class=SpellE>name.equals</span>(<span
class=SpellE>other.name</span>) &amp;&amp; salary == <span class=SpellE>other.salary</span> &amp;&amp; <span
class=SpellE>hireDay.equals</span>(<span class=SpellE>other.hireDay</span>);<o:p></o:p></span></pre><pre><span
style='color:black'> <span class=GramE>86.<span style='mso-spacerun:yes'>    </span>}</span><o:p></o:p></span></pre><pre><span
style='color:black'> 87.<o:p></o:p></span></pre><pre><span style='color:black'> 88.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> <span class=SpellE>int</span> <span class=SpellE>hashCode</span>()<o:p></o:p></span></pre><pre><span
style='color:black'> 89.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 90.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> 7 * <span class=SpellE>name.hashCode</span>() + 11 * new Double(salary).<span
class=SpellE>hashCode</span>() + 13 * <span class=SpellE>hireDay.hashCode</span>();<o:p></o:p></span></pre><pre><span
style='color:black'> 91.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'> 92.<o:p></o:p></span></pre><pre><span style='color:black'> 93.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> String <span class=SpellE>toString</span>()<o:p></o:p></span></pre><pre><span
style='color:black'> 94.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'> 95.<span style='mso-spacerun:yes'>       </span>return <span
class=SpellE><span class=GramE>getClass</span></span><span class=GramE>(</span>).<span
class=SpellE>getName</span>() + &quot;[name=&quot; + name + &quot;,salary=&quot; + salary + &quot;,<span
class=SpellE>hireDay</span>=&quot; + <span class=SpellE>hireDay</span><o:p></o:p></span></pre><pre><span
style='color:black'> 96.<span style='mso-spacerun:yes'>      </span><span style='mso-spacerun:yes'>       </span>+ &quot;]&quot;;<o:p></o:p></span></pre><pre><span
style='color:black'> 97.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'> 98.<o:p></o:p></span></pre><pre><span style='color:black'> 99.<span style='mso-spacerun:yes'>    </span><span
class=GramE>private</span> String name;<o:p></o:p></span></pre><pre><span
style='color:black'>100.<span style='mso-spacerun:yes'>    </span><span
class=GramE>private</span> double salary;<o:p></o:p></span></pre><pre><span
style='color:black'>101.<span style='mso-spacerun:yes'>    </span><span
class=GramE>private</span> Date <span class=SpellE>hireDay</span>;<o:p></o:p></span></pre><pre><span
style='color:black'>102<span class=GramE>. }</span><o:p></o:p></span></pre><pre><span
style='color:black'>103.<o:p></o:p></span></pre><pre><span style='color:black'>104. <span
class=GramE>class</span> Manager extends Employee<o:p></o:p></span></pre><pre><span
style='color:black'>105. {<o:p></o:p></span></pre><pre><span style='color:black'>106.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> Manager(String n, double s, <span class=SpellE>int</span> year, <span
class=SpellE>int</span> month, <span class=SpellE>int</span> day)<o:p></o:p></span></pre><pre><span
style='color:black'>107.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>108.<span style='mso-spacerun:yes'>       </span><span
class=GramE>super(</span>n, s, year, month, day);<o:p></o:p></span></pre><pre><span
style='color:black'>109.<span style='mso-spacerun:yes'>       </span><span
class=GramE>bonus</span> = 0;<o:p></o:p></span></pre><pre><span
style='color:black'>110.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>111.<o:p></o:p></span></pre><pre><span style='color:black'>112.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> double <span class=SpellE>getSalary</span>()<o:p></o:p></span></pre><pre><span
style='color:black'>113.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>114.<span style='mso-spacerun:yes'>       </span><span
class=GramE>double</span> <span class=SpellE>baseSalary</span> = <span
class=SpellE>super.getSalary</span>();<o:p></o:p></span></pre><pre><span
style='color:black'>115.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> <span class=SpellE>baseSalary</span> + bonus;<o:p></o:p></span></pre><pre><span
style='color:black'>116.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>117.<o:p></o:p></span></pre><pre><span style='color:black'>118.<o:p></o:p></span></pre><pre><span
style='color:black'>119.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> void <span class=SpellE>setBonus</span>(double b)<o:p></o:p></span></pre><pre><span
style='color:black'>120.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>121.<span style='mso-spacerun:yes'>       </span><span
class=GramE>bonus</span> = b;<o:p></o:p></span></pre><pre><span
style='color:black'>122.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>123.<o:p></o:p></span></pre><pre><span style='color:black'>124.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> <span class=SpellE>boolean</span> equals(Object <span
class=SpellE>otherObject</span>)<o:p></o:p></span></pre><pre><span
style='color:black'>125.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>126.<span style='mso-spacerun:yes'>       </span><span
class=GramE>if</span> (!<span class=SpellE>super.equals</span>(<span
class=SpellE>otherObject</span>)) return false;<o:p></o:p></span></pre><pre><span
style='color:black'>127.<span style='mso-spacerun:yes'>       </span>Manager other = (Manager) <span
class=SpellE>otherObject</span>;<o:p></o:p></span></pre><pre><span
style='color:black'>128.<span style='mso-spacerun:yes'>       </span>// <span
class=SpellE>super.equals</span> checked that this and other belong to the same class<o:p></o:p></span></pre><pre><span
style='color:black'>129.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> bonus == <span class=SpellE>other.bonus</span>;<o:p></o:p></span></pre><pre><span
style='color:black'>130.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>131.<o:p></o:p></span></pre><pre><span style='color:black'>132.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> <span class=SpellE>int</span> <span class=SpellE>hashCode</span>()<o:p></o:p></span></pre><pre><span
style='color:black'>133.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>134.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> <span class=SpellE>super.hashCode</span>() + 17 * new Double(bonus).<span
class=SpellE>hashCode</span>();<o:p></o:p></span></pre><pre><span
style='color:black'>135.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>136.<o:p></o:p></span></pre><pre><span style='color:black'>137.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> String <span class=SpellE>toString</span>()<o:p></o:p></span></pre><pre><span
style='color:black'>138.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>139.<span style='mso-spacerun:yes'>       </span>return <span
class=SpellE><span class=GramE>super.toString</span></span><span class=GramE>(</span>) + &quot;[bonus=&quot; + bonus + &quot;]&quot;;<o:p></o:p></span></pre><pre><span
style='color:black'>140.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>141.<o:p></o:p></span></pre><pre><span style='color:black'>142.<span style='mso-spacerun:yes'>    </span><span
class=GramE>private</span> double bonus;<o:p></o:p></span></pre><pre><span
style='color:black'>143<span class=GramE>. }</span><o:p></o:p></span></pre><pre><span
style='color:black'><o:p>&nbsp;</o:p></span></pre>

<p class=MsoNormal><span style='color:black'><span style='mso-tab-count:3'>                                    </span></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h2><span class=SpellE><tt><span style='font-size:10.0pt'>java.lang.Object</span></tt></span>
1.0<span style='font-size:11.5pt;color:#6D7288'><o:p></o:p></span></h2>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l5 level1 lfo5;
tab-stops:list .5in'><a name=iddle2695></a><a name=iddle2163></a><![if !supportLists]><span
style='font-size:10.0pt;mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><tt><span style='font-size:10.0pt;color:black'>Class
<span class=SpellE>getClass</span>()</span></tt><span style='font-size:8.5pt;
color:black'><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><a name="contains_information"></a><span
class=GramE><span style='font-size:8.5pt;color:black'>returns</span></span><span
style='font-size:8.5pt;color:black'> a class object that contains information
about the object. As you see later in this chapter, <span
class=doctexthighlight2>Java</span><a name="in_the"></a> has a runtime
representation for classes that is encapsulated in the </span><tt><span
style='font-size:10.0pt;color:black'>Class</span></tt><span style='font-size:
8.5pt;color:black'> <span class=SpellE>class</span>.<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l5 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span class=SpellE><tt><span style='font-size:
10.0pt;color:black'>boolean</span></tt></span><tt><span style='font-size:10.0pt;
color:black'> equals(Object <span class=SpellE>otherObject</span>)</span></tt><span
style='font-size:8.5pt;color:black'><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><span class=GramE><span
style='font-size:8.5pt;color:black'>compares</span></span><span
style='font-size:8.5pt;color:black'> two objects for equality; returns </span><tt><span
style='font-size:10.0pt;color:black'>true</span></tt><a name="area_of"></a><span
style='font-size:8.5pt;color:black'> if the objects point to the same area of
memory, and </span><tt><span style='font-size:10.0pt;color:black'>false</span></tt><a
name="override_this"></a><span style='font-size:8.5pt;color:black'> otherwise.
You should override this method in your own classes.<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l5 level1 lfo5;
tab-stops:list .5in'><a name="String_toString"></a><![if !supportLists]><span
style='font-size:10.0pt;mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><tt><span style='font-size:10.0pt;color:black'>String
<span class=SpellE>toString</span>()</span></tt><span style='font-size:8.5pt;
color:black'><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><a name="string_that"></a><span
class=GramE><span style='font-size:8.5pt;color:black'>returns</span></span><span
style='font-size:8.5pt;color:black'> a string that represents the value of this
object. You should override this method in your own classes.<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l5 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><tt><span style='font-size:10.0pt;color:black'>Object
clone()</span></tt><span style='font-size:8.5pt;color:black'><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><a name="a_clone"></a><span
class=GramE><span style='font-size:8.5pt;color:black'>creates</span></span><span
style='font-size:8.5pt;color:black'> a clone of the object. The <span
class=doctexthighlight2>Java</span><a name="memory_for"></a> runtime system
allocates memory for the new instance and copies the memory allocated for the
current object.<o:p></o:p></span></p>

<h2><span class=SpellE><tt><span style='font-size:10.0pt'>java.lang.Class</span></tt></span>
1.0<span style='font-size:11.5pt;color:#6D7288'><o:p></o:p></span></h2>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l3 level1 lfo6;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><tt><span style='font-size:10.0pt;color:black'>String
<span class=SpellE>getName</span>()</span></tt><span style='font-size:8.5pt;
color:black'><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><span class=GramE><span
style='font-size:8.5pt;color:black'>returns</span></span><span
style='font-size:8.5pt;color:black'> the name of this class.<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l3 level1 lfo6;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:8.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><tt><span style='font-size:10.0pt;color:black'>Class
<span class=SpellE>getSuperclass</span>()</span></tt><span style='font-size:
8.5pt;color:black'><o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in'><a name="class_as"></a><span
class=GramE><span style='font-size:8.5pt;color:black'>returns</span></span><span
style='font-size:8.5pt;color:black'> the <span class=SpellE>superclass</span>
of this class as a </span><tt><span style='font-size:10.0pt;color:black'>Class</span></tt><span
style='font-size:8.5pt;color:black'> object.<o:p></o:p></span></p>

<span style='font-size:8.5pt;font-family:"Times New Roman";mso-fareast-font-family:
SimSun;color:black;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA'><br clear=all style='mso-special-character:line-break;
page-break-before:always'>
</span>

<p class=doclist style='margin-left:.5in'><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></p>

<h3 align=center style='text-align:center'><span style='font-size:18.0pt'>Object
Cloning<o:p></o:p></span></h3>

<p class=doctext><a name="When_you"></a><span style='font-size:11.0pt;
color:black'>When you make a copy of a variable, the original and the copy are
references to the same object. <span class=GramE>(See <a
href="javascript:moveTo('ch06fig01');">Figure 6–1</a><a name="a_change"></a>.)</span>
This means a change to either variable also affects the other</span><span
style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>

<pre><span style='color:black'>Employee original = new <span class=GramE>Employee(</span>&quot;John Public&quot;, 50000);<o:p></o:p></span></pre><pre><span
style='color:black'>Employee copy = original;<o:p></o:p></span></pre><pre><span
class=SpellE><span class=GramE><span style='color:black'>copy.raiseSalary</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span style='color:black'>10); // oops--also changed original<o:p></o:p></span></pre>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h5 align=center style='text-align:center'><a name="Copying_and"></a><span
class=GramE>Figure 6–1.</span> Copying and cloning<span style='font-size:8.5pt;
color:#1F3247'><o:p></o:p></span></h5>

<p class=MsoNormal align=center style='text-align:center'><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:346.5pt;
 height:450pt'>
 <v:imagedata src="Object_files/image001.png" o:title="6-1"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=462 height=600
src="Object_files/image002.jpg" v:shapes="_x0000_i1026"><![endif]></p>

<p class=doctext><a name=like></a><span style='font-size:8.5pt;color:black'>If
you would like </span><tt><span style='font-size:10.0pt;color:black'>copy</span></tt><a
name="begins_its"></a><span style='font-size:8.5pt;color:black'> to be a new
object that begins its life being identical to </span><tt><span
style='font-size:10.0pt;color:black'>original</span></tt><a name="over_time"></a><span
style='font-size:8.5pt;color:black'> but whose state can diverge over time,
then you use the </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><span
style='font-size:8.5pt;color:black'> method.<o:p></o:p></span></p>

<pre><span style='color:black'>Employee copy = <span class=SpellE><span
class=GramE>original.clone</span></span><span class=GramE>(</span>);<o:p></o:p></span></pre><pre><span
class=SpellE><span class=GramE><span style='color:black'>copy.raiseSalary</span></span></span><span
class=GramE><span style='color:black'>(</span></span><span style='color:black'>10); // OK--original unchanged<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>But it isn't quite
so simple. The </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><span
style='font-size:8.5pt;color:black'> method is a </span><tt><span
style='font-size:10.0pt;color:black'>protected</span></tt><span
style='font-size:8.5pt;color:black'> method of </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><a name="cannot_simply"></a><span
style='font-size:8.5pt;color:black'>, which means that your code cannot simply
call it. Only the </span><tt><span style='font-size:10.0pt;color:black'>Employee</span></tt><span
style='font-size:8.5pt;color:black'> class can clone </span><tt><span
style='font-size:10.0pt;color:black'>Employee</span></tt><a name="way_in"></a><span
style='font-size:8.5pt;color:black'> objects. There is a reason for this
restriction. Think about the way in which the </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><span style='font-size:
8.5pt;color:black'> class can implement </span><tt><span style='font-size:10.0pt;
color:black'>clone</span></tt><a name="so_it"></a><span style='font-size:8.5pt;
color:black'>. It knows nothing about the object at all, so it can make only a
field-by-field copy. If all data fields in the object are numbers or other
basic types, copying the fields is just fine. But if the object contains
references to <span class=SpellE>subobjects</span>, then copying the field
gives you another reference to the <span class=SpellE>subobject</span>, so the
original and the cloned objects still share some information.<o:p></o:p></span></p>

<p class=doctext><a name="that_phenomenon"></a><span style='font-size:8.5pt;
color:black'>To visualize that phenomenon, let's consider the </span><tt><span
style='font-size:10.0pt;color:black'>Employee</span></tt><a name="class_that"></a><span
style='font-size:8.5pt;color:black'> class that was introduced in <a
href="http://proquestcombo.safaribooksonline.com/9780132354769/ch04#ch04">Chapter
4</a>. <a href="javascript:moveTo('ch06fig02');">Figure 6–2</a><a
name="happens_when"></a> shows what happens when you use the </span><tt><span
style='font-size:10.0pt;color:black'>clone</span></tt><a name="of_the"></a><span
style='font-size:8.5pt;color:black'> method of the </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><span style='font-size:
8.5pt;color:black'> <a name="such_an"></a><a name=iddle2930></a>class to clone
such an </span><tt><span style='font-size:10.0pt;color:black'>Employee</span></tt><a
name="operation_is"></a><span style='font-size:8.5pt;color:black'> object. As
you can see, the default cloning operation is &quot;shallow&quot;—it doesn't
clone objects that are referenced inside other objects.<o:p></o:p></span></p>

<h5 align=center style='text-align:center'><a name=ch06fig02></a><span
class=GramE>Figure 6–2.</span> A shallow copy<span style='font-size:8.5pt;
color:#1F3247'><o:p></o:p></span></h5>

<p class=MsoNormal><!--[if gte vml 1]><v:shape id="_x0000_i1025" type="#_x0000_t75"
 style='width:414pt;height:247.5pt'>
 <v:imagedata src="Object_files/image003.png" o:title="6-2"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=552 height=330
src="Object_files/image004.jpg" v:shapes="_x0000_i1025"><![endif]></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=doctext><a name="copy_is"></a><span style='font-size:10.0pt;
color:black'>Does it matter if the copy is shallow? It depends. If the <span
class=SpellE>subobject</span> that is shared between the original and the
shallow clone is <span class=docemphasis>immutable</span><a
name="certainly_happens"></a>, then the sharing is safe. This certainly happens
if the <span class=SpellE>subobject</span> belongs to an immutable class, such
as </span><tt><span style='font-size:10.0pt;color:black'>String</span></tt><span
style='font-size:10.0pt;color:black'>. Alternatively, the <span class=SpellE>subobject</span>
may simply remain constant throughout the lifetime of the object, with no <span
class=SpellE>mutators</span> touching it and no methods yielding a reference to
it.<o:p></o:p></span></p>

<p class=doctext><a name=iddle1517></a><a name=iddle1338></a><a name=iddle1337></a><span
style='font-size:10.0pt;color:black'>Quite frequently, however, <span
class=SpellE>subobjects</span> are mutable, and you must redefine the </span><tt><span
style='font-size:10.0pt;color:black'>clone</span></tt><a name="make_a"></a><span
style='font-size:10.0pt;color:black'> method to make a <a name="deep_copy"></a><span
class=docemphasis>deep copy</span><a name="the_subobjects"></a> that clones the
<span class=SpellE>subobjects</span> as well. In our example, the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>hireDay</span></tt></span><a
name="is_a"></a><span style='font-size:10.0pt;color:black'> field is a </span><tt><span
style='font-size:10.0pt;color:black'>Date</span></tt><span style='font-size:
10.0pt;color:black'>, which is mutable.<o:p></o:p></span></p>

<p class=doctext><a name="need_to"></a><span style='font-size:10.0pt;
color:black'>For every class, you need to decide whether<o:p></o:p></span></p>

<table class=MsoNormalTable border=0 cellpadding=0 style='mso-cellspacing:1.5pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>1. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>The default </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><span
  style='font-size:8.5pt;color:black'> method is good enough;<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>2. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>The default </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><span
  style='font-size:8.5pt;color:black'> method can be patched up by calling </span><tt><span
  style='font-size:10.0pt;color:black'>clone</span></tt><span style='font-size:
  8.5pt;color:black'> on the mutable <span class=SpellE>subobjects</span>; and<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2;mso-yfti-lastrow:yes'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>3. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span class=GramE><tt><span
  style='font-size:10.0pt;color:black'>clone</span></tt></span><span
  style='font-size:8.5pt;color:black'> should not be attempted.<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=doctext><a name="To_choose"></a><span style='font-size:8.5pt;
color:black'>The third option is actually the default. To choose either the
first or the second option, a class must<o:p></o:p></span></p>

<table class=MsoNormalTable border=0 cellpadding=0 style='mso-cellspacing:1.5pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a name=ch06pro03></a><b><span style='font-size:8.5pt;
  color:black'>1. </span></b><span style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>Implement the </span><span class=SpellE><tt><span
  style='font-size:10.0pt;color:black'>Cloneable</span></tt></span><span
  style='font-size:8.5pt;color:black'> interface; and<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'>
  <td width=25 valign=top style='width:18.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:8.5pt;color:black'>2. </span></b><span
  style='font-size:8.5pt;color:black'><o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.5pt;
  color:black'>Redefine the </span><tt><span style='font-size:10.0pt;
  color:black'>clone</span></tt><span style='font-size:8.5pt;color:black'>
  method with the </span><tt><span style='font-size:10.0pt;color:black'>public</span></tt><span
  style='font-size:8.5pt;color:black'> access modifier.<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=docnotetitle><a name=ch06note08></a><span style='font-size:10.0pt;
color:black'>Note<o:p></o:p></span></p>

<p class=doctext><span style='font-size:10.0pt;color:black'>The </span><tt><span
style='font-size:10.0pt;color:black'>clone</span></tt><span style='font-size:
10.0pt;color:black'> method is declared </span><tt><span style='font-size:10.0pt;
color:black'>protected</span></tt><span style='font-size:10.0pt;color:black'>
in the </span><tt><span style='font-size:10.0pt;color:black'>Object</span></tt><a
name="simply_call"></a><span style='font-size:10.0pt;color:black'> class so
that your code can't simply call </span><span class=SpellE><span class=GramE><tt><span
style='font-size:10.0pt;color:black'>anObject.clone</span></tt></span></span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>)</span></tt><a name="any_subclass"></a><span
style='font-size:10.0pt;color:black'>. But aren't protected methods accessible
from any subclass, and isn't every class a subclass of </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><span style='font-size:
10.0pt;color:black'>? Fortunately, the rules for protected access are more
subtle (see <a
href="http://proquestcombo.safaribooksonline.com/9780132354769/ch05#ch05">Chapter
5</a>). A subclass can call a protected </span><tt><span style='font-size:10.0pt;
color:black'>clone</span></tt><span style='font-size:10.0pt;color:black'>
method only to clone <span class=docemphasis>its own</span> objects. You must
redefine </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><a
name="by_any"></a><span style='font-size:10.0pt;color:black'> to be public to
allow objects to be cloned by any method.<o:p></o:p></span></p>

<p class=doctext><span style='font-size:10.0pt;color:black'>In this case, the
appearance of the </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>Cloneable</span></tt></span><a name="normal_use"></a><span
style='font-size:10.0pt;color:black'> interface has nothing to do with the
normal use of interfaces. In particular, it does <span class=docemphasis>not</span>
specify the </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><a
name="inherited_from"></a><span style='font-size:10.0pt;color:black'> method—that
method is inherited from the </span><tt><span style='font-size:10.0pt;
color:black'>Object</span></tt><a name="The_interface"></a><span
style='font-size:10.0pt;color:black'> class. The interface merely serves as a
tag, indicating that the <a name="understands_the"></a><a name=iddle3098></a><a
name=iddle2570></a><a name=iddle1970></a><a name=iddle1968></a>class designer
understands the cloning process. Objects are so paranoid about cloning that
they generate a checked exception if an object requests cloning but does not
implement that interface.<o:p></o:p></span></p>

<p class=doctext><a name=ch06note09></a><span style='font-size:10.0pt;
color:black'>Note: <o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>Cloneable</span></tt></span><a
name="is_one"></a><span style='font-size:8.5pt;color:black'> interface is one
of a handful of <span class=docemphasis>tagging interfaces</span> that <span
class=doctexthighlight2>Java</span> provides. (Some programmers call them <span
class=docemphasis>marker interfaces</span><a name="usual_purpose"></a>.) Recall
that the usual purpose of an interface such as </span><tt><span
style='font-size:10.0pt;color:black'>Comparable</span></tt><a
name="implements_a"></a><span style='font-size:8.5pt;color:black'> is to ensure
that a class implements a particular method or set of methods. A tagging
interface has no methods; its only purpose is to allow the use of </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>instanceof</span></tt></span><span
style='font-size:8.5pt;color:black'> in a type inquiry:<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>if</span></span><span
style='color:black'> (<span class=SpellE>obj</span> <span class=SpellE>instanceof</span> <span
class=SpellE>Cloneable</span>) . . .<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="not_use"></a><span style='font-size:8.5pt;color:black'>We
recommend that you do not use tagging interfaces in your own programs.<o:p></o:p></span></p>

<p class=doctext><a name=of></a><span style='font-size:8.5pt;color:black'>Even
if the default (shallow copy) implementation of </span><tt><span
style='font-size:10.0pt;color:black'>clone</span></tt><span style='font-size:
8.5pt;color:black'> is adequate, you still need to implement the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>Cloneable</span></tt></span><span
style='font-size:8.5pt;color:black'> interface, redefine </span><tt><span
style='font-size:10.0pt;color:black'>clone</span></tt><span style='font-size:
8.5pt;color:black'> to be public, and call </span><span class=SpellE><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>super.clone</span></tt></span></span><span
class=GramE><tt><span style='font-size:10.0pt;color:black'>(</span></tt></span><tt><span
style='font-size:10.0pt;color:black'>)</span></tt><span style='font-size:8.5pt;
color:black'>. Here is an example:<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>class</span></span><span
style='color:black'> Employee implements <span class=SpellE>Cloneable</span><o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>// raise visibility level to public, change return type<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span><span class=GramE><span
class=docemphstrong>public</span></span> Employee clone() throws <span
class=SpellE>CloneNotSupportedException</span><o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>{<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>return</span> (Employee) <span class=SpellE>super.clone</span>();<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>. . .<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><a name=ch06note10></a><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=docnotetitle><span style='font-size:8.5pt;color:black'>Note<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>Before <span
class=doctexthighlight2>Java</span> SE 5.0, the </span><tt><span
style='font-size:10.0pt;color:black'>clone</span></tt><span style='font-size:
8.5pt;color:black'> method always had return type </span><tt><span
style='font-size:10.0pt;color:black'>Object</span></tt><span style='font-size:
8.5pt;color:black'>. The covariant return types of <span
class=doctexthighlight2>Java</span><a name=your></a> SE 5.0 let you specify the
correct return type for your </span><tt><span style='font-size:10.0pt;
color:black'>clone</span></tt><span style='font-size:8.5pt;color:black'>
methods.<o:p></o:p></span></p>

<p class=docnotetitle><span style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>The </span><tt><span
style='font-size:10.0pt;color:black'>clone</span></tt><a name="functionality_to"></a><span
style='font-size:8.5pt;color:black'> method that you just saw adds no
functionality to the shallow copy provided by </span><span class=SpellE><tt><span
style='font-size:10.0pt;color:black'>Object.clone</span></tt></span><a
name="makes_the"></a><span style='font-size:8.5pt;color:black'>. It merely
makes the method public. To make a deep copy, you have to work harder and clone
the mutable instance fields.<o:p></o:p></span></p>

<p class=doctext><a name="Here_is"></a><span style='font-size:8.5pt;color:black'>Here
is an example of a </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><a
name="creates_a"></a><span style='font-size:8.5pt;color:black'> method that
creates a deep copy:<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>class</span></span><span
style='color:black'> Employee implements <span class=SpellE>Cloneable</span><o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>. . .<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span><span class=GramE>public</span> Employee clone() throws <span
class=SpellE>CloneNotSupportedException</span><o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>  </span><span style='mso-spacerun:yes'> </span>{<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>// call <span
class=SpellE><span class=GramE>Object.clone</span></span><span class=GramE>()</span><o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span>Employee cloned = (Employee) <span
class=SpellE><span class=GramE>super.clone</span></span><span class=GramE>(</span>);<o:p></o:p></span></pre><pre><span
style='color:black'><o:p>&nbsp;</o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>      </span>// clone mutable fields<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=SpellE>cloned.hireDay</span> = (Date) <span class=SpellE><span
class=GramE>hireDay.clone</span></span><span class=GramE>(</span>);<o:p></o:p></span></pre><pre><span
style='color:black'><o:p>&nbsp;</o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>return</span> cloned;<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name=iddle2557></a><a name=iddle1339></a><a name=iddle1146></a><span
style='font-size:8.5pt;color:black'>The </span><tt><span style='font-size:10.0pt;
color:black'>clone</span></tt><span style='font-size:8.5pt;color:black'> method
of the </span><tt><span style='font-size:10.0pt;color:black'>Object</span></tt><a
name="throw_a"></a><span style='font-size:8.5pt;color:black'> class threatens
to throw a </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>CloneNotSupportedException</span></tt></span><span
style='font-size:8.5pt;color:black'>—it does that whenever </span><tt><span
style='font-size:10.0pt;color:black'>clone</span></tt><a name="class_does"></a><span
style='font-size:8.5pt;color:black'> is invoked on an object whose class does
not implement the </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>Cloneable</span></tt></span><span style='font-size:8.5pt;
color:black'> interface. Of course, the </span><tt><span style='font-size:10.0pt;
color:black'>Employee</span></tt><span style='font-size:8.5pt;color:black'> and
</span><tt><span style='font-size:10.0pt;color:black'>Date</span></tt><span
style='font-size:8.5pt;color:black'> class implements the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>Cloneable</span></tt></span><a
name="compiler_does"></a><span style='font-size:8.5pt;color:black'> interface,
so the exception won't be thrown. However, the compiler does not know that.
Therefore, we declared the exception:<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>public</span></span><span
style='color:black'> Employee clone() <span class=docemphstrong>throws <span
class=SpellE>CloneNotSupportedException</span></span><o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="catch_the"></a><span style='font-size:8.5pt;
color:black'>Would it be better to catch the exception instead?<o:p></o:p></span></p>

<pre><span class=GramE><span style='color:black'>public</span></span><span
style='color:black'> Employee clone()<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span><span
class=GramE>try</span><o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>{<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>      </span><span
class=GramE>return</span> <span class=SpellE>super.clone</span>();<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span><span class=GramE>catch</span> (<span
class=SpellE>CloneNotSupportedException</span> e) { return null; }<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>// this won't happen, since we are <span
class=SpellE>Cloneable</span><o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='font-size:10.0pt;color:black'>This is appropriate
for </span><tt><span style='font-size:10.0pt;color:black'>final</span></tt><span
style='font-size:10.0pt;color:black'> classes. Otherwise, it is a good idea to
leave the </span><tt><span style='font-size:10.0pt;color:black'>throws</span></tt><span
style='font-size:10.0pt;color:black'> <span class=SpellE>specifier</span> in
place. That gives subclasses the option of throwing a </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>CloneNotSupportedException</span></tt></span><span
style='font-size:10.0pt;color:black'> if they can't support cloning.<o:p></o:p></span></p>

<p class=doctext><a name="of_subclasses"></a><span style='font-size:10.0pt;
color:black'>You have to be careful about cloning of subclasses. For example,
once you have defined the </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><span
style='font-size:10.0pt;color:black'> method for the </span><tt><span
style='font-size:10.0pt;color:black'>Employee</span></tt><a name="anyone_can"></a><span
style='font-size:10.0pt;color:black'> class, anyone can use it to clone </span><tt><span
style='font-size:10.0pt;color:black'>Manager</span></tt><span style='font-size:
10.0pt;color:black'> <span class=GramE>objects</span>. Can the </span><tt><span
style='font-size:10.0pt;color:black'>Employee</span></tt><a name="do_the"></a><span
style='font-size:10.0pt;color:black'> clone method do the job? It depends on
the fields of the </span><tt><span style='font-size:10.0pt;color:black'>Manager</span></tt><a
name="our_case"></a><span style='font-size:10.0pt;color:black'> class. In our
case, there is no problem because the </span><tt><span style='font-size:10.0pt;
color:black'>bonus</span></tt><a name=But></a><span style='font-size:10.0pt;
color:black'> field has primitive type. But </span><tt><span style='font-size:
10.0pt;color:black'>Manager</span></tt><a name="a_deep"></a><span
style='font-size:10.0pt;color:black'> might have acquired fields that require a
deep copy or <span class=GramE>that are</span> not <span class=SpellE>cloneable</span>.
There is no guarantee that the <span class=SpellE>implementor</span> of the
subclass has fixed </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><a
name="that_reason"></a><span style='font-size:10.0pt;color:black'> to do the
right thing. For that reason, the </span><tt><span style='font-size:10.0pt;
color:black'>clone</span></tt><span style='font-size:10.0pt;color:black'>
method is declared as </span><tt><span style='font-size:10.0pt;color:black'>protected</span></tt><span
style='font-size:10.0pt;color:black'> in the </span><tt><span style='font-size:
10.0pt;color:black'>Object</span></tt><a name="if_you"></a><span
style='font-size:10.0pt;color:black'> class. But you don't have that luxury if
you want users of your classes to invoke </span><tt><span style='font-size:
10.0pt;color:black'>clone</span></tt><span style='font-size:10.0pt;color:black'>.<o:p></o:p></span></p>

<p class=doctext><span style='font-size:10.0pt;color:black'>Should you
implement </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><a
name="deep_copies"></a><span style='font-size:10.0pt;color:black'> in your own
classes? If your clients need to make deep copies, then you probably should.
Some authors feel that you should avoid </span><tt><span style='font-size:10.0pt;
color:black'>clone</span></tt><a name="the_same"></a><span style='font-size:
10.0pt;color:black'> altogether and instead implement another method for the
same purpose. We agree that </span><tt><span style='font-size:10.0pt;
color:black'>clone</span></tt><a name="but_you"></a><span style='font-size:
10.0pt;color:black'> is rather awkward, but you'll run into the same issues if
you shift the responsibility to another method. At any rate, cloning is less
common than you may think. Less than 5 percent of the classes in the standard
library implement </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><span
style='font-size:10.0pt;color:black'>.<o:p></o:p></span></p>

<p class=doctext><a name="The_program"></a><span style='font-size:10.0pt;
color:black'>The program in <a href="javascript:moveTo('ch06ex02');">Listing
6–2</a> clones an </span><tt><span style='font-size:10.0pt;color:black'>Employee</span></tt><a
name="two_mutators"></a><span style='font-size:10.0pt;color:black'> object,
then invokes two <span class=SpellE>mutators</span>. The </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>raiseSalary</span></tt></span><a
name="changes_the"></a><span style='font-size:10.0pt;color:black'> method
changes the value of the </span><tt><span style='font-size:10.0pt;color:black'>salary</span></tt><span
style='font-size:10.0pt;color:black'> field, whereas the </span><span
class=SpellE><tt><span style='font-size:10.0pt;color:black'>setHireDay</span></tt></span><a
name="state_of"></a><span style='font-size:10.0pt;color:black'> method changes
the state of the </span><span class=SpellE><tt><span style='font-size:10.0pt;
color:black'>hireDay</span></tt></span><a name=because></a><span
style='font-size:10.0pt;color:black'> field. Neither mutation affects the
original object because </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><span
style='font-size:10.0pt;color:black'> has been defined to make a deep copy.<o:p></o:p></span></p>

<p class=docnotetitle><a name=ch06note11></a><span style='font-size:10.0pt;
color:black'>Note<o:p></o:p></span></p>

<p class=doctext><span style='font-size:8.5pt;color:black'>All array types have
a </span><tt><span style='font-size:10.0pt;color:black'>clone</span></tt><a
name="can_use"></a><span style='font-size:8.5pt;color:black'> method that is
public, not protected. You can use it to make a new array that contains copies
of all elements. For example:<o:p></o:p></span></p>

<pre><span class=SpellE><span class=GramE><span style='color:black'>int</span></span></span><span
class=GramE><span style='color:black'>[</span></span><span style='color:black'>] <span
class=SpellE>luckyNumbers</span> = { 2, 3, 5, 7, 11, 13 };<o:p></o:p></span></pre><pre><span
class=SpellE><span class=GramE><span style='color:black'>int</span></span></span><span
class=GramE><span style='color:black'>[</span></span><span style='color:black'>] cloned = (<span
class=SpellE>int</span>[]) <span class=SpellE>luckyNumbers.clone</span>();<o:p></o:p></span></pre><pre><span
class=GramE><span style='color:black'>cloned[</span></span><span
style='color:black'>5] = 12; // doesn't change <span class=SpellE>luckyNumbers</span>[5]<o:p></o:p></span></pre>

<h5><span class=GramE>Listing 6–2.</span> <span class=SpellE>CloneTest.java</span><span
style='font-size:8.5pt;color:#1F3247'><o:p></o:p></span></h5>

<p class=docnotetitle><span style='font-size:10.0pt;color:black'><o:p>&nbsp;</o:p></span></p>

<pre><span style='color:black'>1. <span class=GramE>import</span> <span
class=SpellE>java.util</span>.*;<o:p></o:p></span></pre><pre><span
style='color:black'> 2.<o:p></o:p></span></pre><pre><span style='color:black'> 3. /**<o:p></o:p></span></pre><pre><span
style='color:black'> 4.<span style='mso-spacerun:yes'>  </span>* This program demonstrates cloning.<o:p></o:p></span></pre><pre><span
style='color:black'> 5.<span style='mso-spacerun:yes'>  </span>* @version 1.10 2002-07-01<o:p></o:p></span></pre><pre><span
style='color:black'> 6.<span style='mso-spacerun:yes'>  </span>* @author Cay <span
class=SpellE>Horstmann</span><o:p></o:p></span></pre><pre><span
style='color:black'> 7.<span style='mso-spacerun:yes'>  </span>*/<o:p></o:p></span></pre><pre><span
style='color:black'> 8. <span class=GramE>public</span> class <span
class=SpellE>CloneTest</span><o:p></o:p></span></pre><pre><span
style='color:black'> 9. {<o:p></o:p></span></pre><pre><span style='color:black'>10.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> static void main(String[] <span class=SpellE>args</span>)<o:p></o:p></span></pre><pre><span
style='color:black'>11.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>12.<span style='mso-spacerun:yes'>       </span><span
class=GramE>try</span><o:p></o:p></span></pre><pre><span style='color:black'>13.<span style='mso-spacerun:yes'>       </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>14.<span style='mso-spacerun:yes'>          </span>Employee original = new <span
class=GramE>Employee(</span>&quot;John Q. Public&quot;, 50000);<o:p></o:p></span></pre><pre><span
style='color:black'>15.<span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>original.setHireDay</span></span><span
class=GramE>(</span>2000, 1, 1);<o:p></o:p></span></pre><pre><span
style='color:black'>16.<span style='mso-spacerun:yes'>          </span>Employee copy = <span
class=SpellE><span class=GramE>original.clone</span></span><span class=GramE>(</span>);<o:p></o:p></span></pre><pre><span
style='color:black'>17.<span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>copy.raiseSalary</span></span><span class=GramE>(</span>10);<o:p></o:p></span></pre><pre><span
style='color:black'>18.<span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>copy.setHireDay</span></span><span class=GramE>(</span>2002, 12, 31);<o:p></o:p></span></pre><pre><span
style='color:black'>19.<span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;original=&quot; + original);<o:p></o:p></span></pre><pre><span
style='color:black'>20.<span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>System.out.println</span></span><span
class=GramE>(</span>&quot;copy=&quot; + copy);<o:p></o:p></span></pre><pre><span
style='color:black'>21.<span style='mso-spacerun:yes'>       </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>22.<span style='mso-spacerun:yes'>       </span><span
class=GramE>catch</span> (<span class=SpellE>CloneNotSupportedException</span> e)<o:p></o:p></span></pre><pre><span
style='color:black'>23.<span style='mso-spacerun:yes'>       </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>24.<span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>e.printStackTrace</span></span><span
class=GramE>(</span>);<o:p></o:p></span></pre><pre><span style='color:black'>25.<span style='mso-spacerun:yes'>       </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>26.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>27<span class=GramE>. }</span><o:p></o:p></span></pre><pre><span
style='color:black'>28.<o:p></o:p></span></pre><pre><span style='color:black'>29. <span
class=GramE>class</span> Employee implements <span class=SpellE>Cloneable</span><o:p></o:p></span></pre><pre><span
style='color:black'>30. {<o:p></o:p></span></pre><pre><span style='color:black'>31.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> Employee(String n, double s)<o:p></o:p></span></pre><pre><span
style='color:black'>32.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>33.<span style='mso-spacerun:yes'>       </span><span
class=GramE>name</span> = n;<o:p></o:p></span></pre><pre><span
style='color:black'>34.<span style='mso-spacerun:yes'>       </span><span
class=GramE>salary</span> = s;<o:p></o:p></span></pre><pre><span
style='color:black'>35.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>hireDay</span></span> = new Date();<o:p></o:p></span></pre><pre><span
style='color:black'>36.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>37.<o:p></o:p></span></pre><pre><span style='color:black'>38.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> Employee clone() throws <span class=SpellE>CloneNotSupportedException</span><o:p></o:p></span></pre><pre><span
style='color:black'>39.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>40.<span style='mso-spacerun:yes'>       </span>// call <span
class=SpellE><span class=GramE>Object.clone</span></span><span class=GramE>()</span><o:p></o:p></span></pre><pre><span
style='color:black'>41.<span style='mso-spacerun:yes'>       </span>Employee cloned = (Employee) <span
class=SpellE><span class=GramE>super.clone</span></span><span class=GramE>(</span>);<o:p></o:p></span></pre><pre><span
style='color:black'>42.<o:p></o:p></span></pre><pre><span style='color:black'>43.<span style='mso-spacerun:yes'>       </span>// clone mutable fields<o:p></o:p></span></pre><pre><span
style='color:black'>44.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>cloned.hireDay</span></span> = (Date) <span
class=SpellE>hireDay.clone</span>();<o:p></o:p></span></pre><pre><span
style='color:black'>45.<o:p></o:p></span></pre><pre><span style='color:black'>46.<span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> cloned;<o:p></o:p></span></pre><pre><span
style='color:black'>47.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>48.<o:p></o:p></span></pre><pre><span style='color:black'>49.<span style='mso-spacerun:yes'>    </span>/**<o:p></o:p></span></pre><pre><span
style='color:black'>50.<span style='mso-spacerun:yes'>     </span>* Set the hire day to a given date.<o:p></o:p></span></pre><pre><span
style='color:black'>51.<span style='mso-spacerun:yes'>     </span>* @<span
class=SpellE>param</span> year the year of the hire day<o:p></o:p></span></pre><pre><span
style='color:black'>52.<span style='mso-spacerun:yes'>     </span>* @<span
class=SpellE>param</span> month the month of the hire day<o:p></o:p></span></pre><pre><span
style='color:black'>53.<span style='mso-spacerun:yes'>     </span>* @<span
class=SpellE>param</span> day the day of the hire day<o:p></o:p></span></pre><pre><span
style='color:black'>54.<span style='mso-spacerun:yes'>     </span>*/<o:p></o:p></span></pre><pre><span
style='color:black'>55.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> void <span class=SpellE>setHireDay</span>(<span
class=SpellE>int</span> year, <span class=SpellE>int</span> month, <span
class=SpellE>int</span> day)<o:p></o:p></span></pre><pre><span
style='color:black'>56.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>57.<span style='mso-spacerun:yes'>       </span>Date <span
class=SpellE>newHireDay</span> = new <span class=SpellE><span class=GramE>GregorianCalendar</span></span><span
class=GramE>(</span>year, month - 1, day).<span class=SpellE>getTime</span>();<o:p></o:p></span></pre><pre><span
style='color:black'>58.<o:p></o:p></span></pre><pre><span style='color:black'>59.<span style='mso-spacerun:yes'>       </span>// Example of instance field mutation<o:p></o:p></span></pre><pre><span
style='color:black'>60.<span style='mso-spacerun:yes'>       </span><span
class=SpellE><span class=GramE>hireDay.setTime</span></span><span class=GramE>(</span><span
class=SpellE>newHireDay.getTime</span>());<o:p></o:p></span></pre><pre><span
style='color:black'>61.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>62.<o:p></o:p></span></pre><pre><span style='color:black'>63.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> void <span class=SpellE>raiseSalary</span>(double <span
class=SpellE>byPercent</span>)<o:p></o:p></span></pre><pre><span
style='color:black'>64.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>65.<span style='mso-spacerun:yes'>       </span><span
class=GramE>double</span> raise = salary * <span class=SpellE>byPercent</span> / 100;<o:p></o:p></span></pre><pre><span
style='color:black'>66.<span style='mso-spacerun:yes'>       </span><span
class=GramE>salary</span> += raise;<o:p></o:p></span></pre><pre><span
style='color:black'>67.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>68.<o:p></o:p></span></pre><pre><span style='color:black'>69.<span style='mso-spacerun:yes'>    </span><span
class=GramE>public</span> String <span class=SpellE>toString</span>()<o:p></o:p></span></pre><pre><span
style='color:black'>70.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>71.<span style='mso-spacerun:yes'>       </span>return &quot;<span
class=GramE>Employee[</span>name=&quot; + name + &quot;,salary=&quot; + salary + &quot;,<span
class=SpellE>hireDay</span>=&quot; + <span class=SpellE>hireDay</span> + &quot;]&quot;;<o:p></o:p></span></pre><pre><span
style='color:black'>72.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>73.<o:p></o:p></span></pre><pre><span style='color:black'>74.<span style='mso-spacerun:yes'>    </span><span
class=GramE>private</span> String name;<o:p></o:p></span></pre><pre><span
style='color:black'>75.<span style='mso-spacerun:yes'>    </span><span
class=GramE>private</span> double salary;<o:p></o:p></span></pre><pre><span
style='color:black'>76.<span style='mso-spacerun:yes'>    </span><span
class=GramE>private</span> Date <span class=SpellE>hireDay</span>;<o:p></o:p></span></pre><pre>77<span
class=GramE>. }</span><span style='color:black'><o:p></o:p></span></pre></div>

</body>

</html>
