<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="ArrayLists_files/filelist.xml">
<title>Generic Array Lists</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>DePaul University</o:Author>
  <o:LastAuthor>cti</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>14</o:TotalTime>
  <o:Created>2009-01-07T02:20:00Z</o:Created>
  <o:LastSaved>2009-01-07T02:20:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>1839</o:Words>
  <o:Characters>10486</o:Characters>
  <o:Company>DePaul University</o:Company>
  <o:Lines>87</o:Lines>
  <o:Paragraphs>24</o:Paragraphs>
  <o:CharactersWithSpaces>12301</o:CharactersWithSpaces>
  <o:Version>11.8028</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-language:EN-US;}
h3
	{margin-top:11.25pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:9.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-fareast-language:EN-US;}
h4
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-fareast-language:EN-US;}
h5
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:13.0pt;
	font-family:"Times New Roman";
	mso-fareast-language:EN-US;
	font-style:italic;}
a:link, span.MsoHyperlink
	{color:#00217B;
	mso-text-animation:none;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-language:EN-US;}
tt
	{font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
p.doctext, li.doctext, div.doctext
	{mso-style-name:doctext;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-language:EN-US;}
span.doctexthighlight2
	{mso-style-name:doctexthighlight2;}
span.docemphasis
	{mso-style-name:docemphasis;}
p.docnotetitle, li.docnotetitle, div.docnotetitle
	{mso-style-name:docnotetitle;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-language:EN-US;}
span.docemphstrong
	{mso-style-name:docemphstrong;}
span.docemphitalicalt
	{mso-style-name:docemphitalicalt;}
p.doclist, li.doclist, div.doclist
	{mso-style-name:doclist;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-language:EN-US;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1364861420;
	mso-list-template-ids:1173924444;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US link="#00217B" vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h3 align=center style='text-align:center'><span style='font-size:18.0pt'>Generic
Array Lists<o:p></o:p></span></h3>

<h3 align=center style='text-align:center'><span style='font-size:18.0pt'><o:p>&nbsp;</o:p></span></h3>
<center><a href="ArrayList (Java Platform SE 6).htm">ArrayList API</a></center><P>
<h3 align=center style='text-align:center'><span lang=NO-BOK style='font-size:
18.0pt;mso-ansi-language:NO-BOK'><a
href="../ArrayList%20(Java%20Platform%20SE%206).htm"><span
style='mso-spacerun:yes'> </span><o:p></o:p></a></span></h3>

<p class=doctext><a name="In_many"></a><span style='color:black'>In many
programming languages—in particular, in C—you have to fix the sizes of all
arrays at compile time. Programmers hate this because it forces them into
uncomfortable trade-offs. How many employees will be in a department? Surely no
more than 100. What if there is a humongous department with 150 employees? Do
we want to waste 90 entries for every department with just 10 employees?<o:p></o:p></span></p>

<p class=doctext><a name="situation_is"></a><span style='color:black'>In Java,
the situation is much better. You can set the size of an array at runtime.<o:p></o:p></span></p>

<pre><span style='color:black'>int actualSize = . . .;<o:p></o:p></span></pre><pre><span
style='color:black'>Employee[] staff = new Employee[actualSize];<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="this_code"></a><span style='color:black'>Of course,
this code does not completely solve the problem of dynamically modifying arrays
at runtime. Once you set the array size, you cannot change it easily. Instead,
the easiest way in Java to deal with this common situation is to use another
Java class, called </span><span class=doctexthighlight2><span style='font-family:
"Courier New";color:black'>ArrayList</span></span><span style='color:black'>.
The </span><span class=doctexthighlight2><span style='font-family:"Courier New";
color:black'>ArrayList</span></span><a name="to_an"></a><span style='color:
black'> class is similar to an array, but it automatically adjusts its capacity
as you add and remove elements, without your needing to write any code.<o:p></o:p></span></p>

<p class=doctext><span style='color:black'>As of Java SE 5.0, </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><span
style='color:black'> is a <span class=docemphasis>generic class</span> with a <span
class=docemphasis>type parameter</span><a name="element_objects"></a>. To
specify the type of the element objects that the array list holds, you append a
class name enclosed in angle brackets, such as </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>&lt;Employee&gt;</span></tt><span
style='color:black'>. You will see in <a
href="http://proquestcombo.safaribooksonline.com/9780132354769/ch13#ch13">Chapter
13</a><a name="generic_class"></a> how to define your own generic class, but
you don't need to know any of those technicalities to use the </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><span
style='color:black'> type.<o:p></o:p></span></p>

<p class=doctext><a name="an_array"></a><span style='color:black'>Here we
declare and construct an array list that holds </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>Employee</span></tt><span
style='color:black'> objects:<o:p></o:p></span></p>

<pre><span class=doctexthighlight2><span style='color:black'>ArrayList</span></span><span
style='color:black'>&lt;Employee&gt; staff = new <span class=doctexthighlight2>ArrayList</span>&lt;Employee&gt;();<o:p></o:p></span></pre>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=docnotetitle><b style='mso-bidi-font-weight:normal'>Note: </b><a
name="a_single"></a>Before Java SE 5.0, there were no generic classes. Instead,
there was a single <span class=doctexthighlight2><span style='font-family:"Courier New";
color:black'>ArrayList</span></span><a name="of_type"></a> class, a &quot;one
size fits all&quot; collection that holds elements of type <tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>Object</span></tt><a
name="must_use"></a>. If you must use an older version of Java, simply drop all
<tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;
color:black'>&lt;...&gt;</span></tt><a name="You_can"></a> suffixes. You can
still use <span class=doctexthighlight2><span style='font-family:"Courier New";
color:black'>ArrayList</span></span> without a <tt><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt;color:black'>&lt;...&gt;</span></tt><a
name="Java_SE"></a> suffix in Java SE 5.0 and beyond. It is considered a
&quot;raw&quot; type, with the type parameter erased.</p>

<p class=doctext><a name="even_older"></a><span style='color:black'>In even
older versions of the Java programming language, programmers used the </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>Vector</span></tt><a
name=the></a><span style='color:black'> class for dynamic arrays. However, the </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><a
name="no_longer"></a><span style='color:black'> class is more efficient, and
there is no longer any good reason to use the </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>Vector</span></tt><span
style='color:black'> class.<o:p></o:p></span></p>

<p class=doctext><span style='color:black'>You use the </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>add</span></tt><span
style='color:black'> method to add new elements to an array list. For example,
here is how you populate an array list with employee objects:<o:p></o:p></span></p>

<pre><span style='color:black'>staff.add(new Employee(&quot;Harry Hacker&quot;, . . .));<o:p></o:p></span></pre><pre><span
style='color:black'>staff.add(new Employee(&quot;Tony Tester&quot;, . . .));<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="internal_array"></a><span style='color:black'>The
array list manages an internal array of object references. Eventually, that
array will run out of space. This is where array lists work their magic: If you
call </span><tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;
color:black'>add</span></tt><a name="creates_a"></a><span style='color:black'>
and the internal array is full, the array list automatically creates a bigger
array and copies all the objects from the smaller to the bigger array.<o:p></o:p></span></p>

<p class=doctext><a name="how_many"></a><span style='color:black'>If you
already know, or have a good guess, how many elements you want to store, then
call the </span><tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:
12.0pt;color:black'>ensureCapacity</span></tt><a name="filling_the"></a><span
style='color:black'> method before filling the array list:<o:p></o:p></span></p>

<pre><span style='color:black'>staff.ensureCapacity(100);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="That_call"></a><span style='color:black'>That call
allocates an internal array of 100 objects. Then, the first 100 calls to </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>add</span></tt><a
name="involve_any"></a><span style='color:black'> do not involve any costly
reallocation.<o:p></o:p></span></p>

<p class=doctext><a name="can_also"></a><span style='color:black'>You can also
pass an initial capacity to the </span><span class=doctexthighlight2><span
style='font-family:"Courier New";color:black'>ArrayList</span></span><span
style='color:black'> constructor:<o:p></o:p></span></p>

<pre><span class=doctexthighlight2><span style='color:black'>ArrayList</span></span><span
style='color:black'>&lt;Employee&gt; staff = new <span class=doctexthighlight2>ArrayList</span>&lt;Employee&gt;(100);<o:p></o:p></span></pre>

<p class=MsoNormal><a name=ch05note30></a><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=docnotetitle><b style='mso-bidi-font-weight:normal'>Caution: </b><a
name="list_as"></a>Allocating an array list as</p>

<pre><span style='color:black'><span style='mso-spacerun:yes'>       </span>new <span
class=doctexthighlight2>ArrayList</span>&lt;Employee&gt;(100) // capacity is 100<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'>is <span class=docemphasis>not</span><a
name="array_as"></a> the same as allocating a new array as<o:p></o:p></span></p>

<pre><span style='color:black'><span style='mso-spacerun:yes'>      </span>new Employee[100] // size is 100<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="between_the"></a><span style='color:black'>There is
an important distinction between the capacity of an array list and the size of
an array. If you allocate an array with 100 entries, then the array has 100
slots, ready for use. An array list with a capacity of 100 elements has the <span
class=docemphasis>potential</span><a name="than_"></a> of holding 100 elements
(and, in fact, more than 100, at the cost of additional reallocations); but at
the beginning, even after its initial construction, an array list holds no
elements at all.<o:p></o:p></span></p>

<p class=doctext><span style='color:black'>The </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>size</span></tt><a
name="array_list"></a><span style='color:black'> method returns the actual
number of elements in the array list. For example,<o:p></o:p></span></p>

<pre><span style='color:black'>staff.size()<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'>returns the current number of
elements in the </span><tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:
12.0pt;color:black'>staff</span></tt><a name="is_the"></a><span
style='color:black'> array list. This is the equivalent of<o:p></o:p></span></p>

<pre><span style='color:black'>a.length<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="for_an"></a><span style='color:black'>for an array </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>a</span></tt><span
style='color:black'>.<o:p></o:p></span></p>

<p class=doctext><a name="are_reasonably"></a><span style='color:black'>Once
you are reasonably sure that the array list is at its permanent size, you can
call the </span><tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:
12.0pt;color:black'>trimToSize</span></tt><a name="method_adjusts"></a><span
style='color:black'> method. This method adjusts the size of the memory block
to use exactly as much storage space as is required to hold the current number
of elements. The garbage collector will reclaim any excess memory.<o:p></o:p></span></p>

<p class=doctext><a name="the_size"></a><span style='color:black'>Once you trim
the size of an array list, adding new elements will move the block again, which
takes time. You should only use </span><tt><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt;color:black'>trimToSize</span></tt><a
name="any_more"></a><span style='color:black'> when you are sure you won't add
any more elements to the array list.<o:p></o:p></span></p>

<h4>Accessing Array List Elements<span style='font-size:9.0pt;color:white'><o:p></o:p></span></h4>

<p class=doctext><a name="comes_for"></a><span style='color:black'>Unfortunately,
nothing comes for free. The automatic growth convenience that array lists give
requires a more complicated syntax for accessing the elements. The reason is
that the </span><span class=doctexthighlight2><span style='font-family:"Courier New";
color:black'>ArrayList</span></span><a name="a_part"></a><span
style='color:black'> class is not a part of the Java programming language; it
is just a utility class programmed by someone and supplied in the standard
library.<o:p></o:p></span></p>

<p class=doctext><span style='color:black'>Instead of using the pleasant </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>[]</span></tt><a
name="element_of"></a><span style='color:black'> syntax to access or change the
element of an array, you use the </span><tt><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt;color:black'>get</span></tt><span
style='color:black'> and </span><tt><span style='mso-ansi-font-size:12.0pt;
mso-bidi-font-size:12.0pt;color:black'>set</span></tt><span style='color:black'>
methods.<o:p></o:p></span></p>

<p class=doctext><span style='color:black'>For example, to set the </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>i</span></tt><span
style='color:black'>th element, you use<o:p></o:p></span></p>

<pre><span style='color:black'>staff.set(i, harry);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'>This is equivalent to<o:p></o:p></span></p>

<pre><span style='color:black'>a[i] = harry;<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'>for an array </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>a</span></tt><span
style='color:black'>. (As with arrays, the index values are zero-based.)<o:p></o:p></span></p>

<p class=docnotetitle><a name=ch05note32></a><b style='mso-bidi-font-weight:
normal'><span style='color:black'>Caution: <o:p></o:p></span></b></p>

<p class=doctext><span style='color:black'>Do not call </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>list.set(i,
x)</span></tt><span style='color:black'> until the <span class=docemphasis>size</span><a
name="larger_than"></a> of the array list is larger than </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>i</span></tt><span
style='color:black'>. For example, the following code is wrong:<o:p></o:p></span></p>

<pre><span class=doctexthighlight2><span style='color:black'>ArrayList</span></span><span
style='color:black'>&lt;Employee&gt; list = new <span class=doctexthighlight2>ArrayList</span>&lt;Employee&gt;(100); // capacity 100, size 0<o:p></o:p></span></pre><pre><span
style='color:black'>list.set(0, x); // no element 0 yet<o:p></o:p></span></pre><pre><span
style='color:black'><o:p>&nbsp;</o:p></span></pre><pre><span style='color:black'><span
style='mso-tab-count:5'>                                      </span><span style='mso-spacerun:yes'>  </span><o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'>Use the </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>add</span></tt><span
style='color:black'> method instead of </span><tt><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt;color:black'>set</span></tt><a name=use></a><span
style='color:black'> to fill up an array, and use </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>set</span></tt><span
style='color:black'> only to replace a previously added element.<o:p></o:p></span></p>

<p class=doctext><span style='color:black'>To get an array list element, use<o:p></o:p></span></p>

<pre><span style='color:black'>Employee e = staff.get(i);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'>This is equivalent to<o:p></o:p></span></p>

<pre><span style='color:black'>Employee e = a[i];<o:p></o:p></span></pre>

<p class=MsoNormal><a name=ch05note33></a><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=docnotetitle><b style='mso-bidi-font-weight:normal'><span
style='color:black'>Note: <o:p></o:p></span></b></p>

<p class=doctext><span style='color:black'>Before Java SE 5.0, there were no
generic classes, and the </span><tt><span style='mso-ansi-font-size:12.0pt;
mso-bidi-font-size:12.0pt;color:black'>get</span></tt><span style='color:black'>
method of the raw </span><span class=doctexthighlight2><span style='font-family:
"Courier New";color:black'>ArrayList</span></span><span style='color:black'>
class had no choice but to return an </span><tt><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt;color:black'>Object</span></tt><span
style='color:black'>. Consequently, callers of </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>get</span></tt><span
style='color:black'> had to cast the returned value to the desired type:<o:p></o:p></span></p>

<pre><span style='color:black'>Employee e = <span class=docemphstrong>(Employee)</span> staff.get(i);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'>The raw </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><span
style='color:black'> is also a bit dangerous. Its </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>add</span></tt><span
style='color:black'> and </span><tt><span style='mso-ansi-font-size:12.0pt;
mso-bidi-font-size:12.0pt;color:black'>set</span></tt><span style='color:black'>
methods accept objects of any type. A call<o:p></o:p></span></p>

<pre><span style='color:black'>staff.set(i, new Date());<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="into_grief"></a><span style='color:black'>compiles
without so much as a warning, and you run into grief only when you retrieve the
object and try to cast it. If you use an </span><span class=doctexthighlight2><span
style='font-family:"Courier New";color:black'>ArrayList</span></span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>&lt;Employee&gt;</span></tt><span
style='color:black'> instead, the compiler will detect this error.<o:p></o:p></span></p>

<p class=doctext><a name="both_worlds"></a><span style='color:black'>You can
sometimes get the best of both worlds—flexible growth and convenient element
access—with the following trick. First, make an array list and add all the
elements:<o:p></o:p></span></p>

<pre><span class=doctexthighlight2><span style='color:black'>ArrayList</span></span><span
style='color:black'>&lt;X&gt; list = new <span class=doctexthighlight2>ArrayList</span>&lt;X&gt;();<o:p></o:p></span></pre><pre><span
style='color:black'>while (. . .)<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>x = . . .;<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>list.add(x);<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="are_done"></a><span style='color:black'>When you are
done, use the </span><tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:
12.0pt;color:black'>toArray</span></tt><a name="method_to"></a><span
style='color:black'> method to copy the elements into an array:<o:p></o:p></span></p>

<pre><span style='color:black'>X[] a = new X[list.size()];<o:p></o:p></span></pre><pre><span
style='color:black'>list.toArray(a);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="to_add"></a><span style='color:black'>Sometimes, you
need to add elements in the middle of an array list. Use the </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>add</span></tt><a
name="with_an"></a><span style='color:black'> method with an index parameter:<o:p></o:p></span></p>

<pre><span style='color:black'>int n = staff.size() / 2;<o:p></o:p></span></pre><pre><span
style='color:black'>staff.add(n, e);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name=locations></a><span style='color:black'>The elements
at locations </span><tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:
12.0pt;color:black'>n</span></tt><a name="make_room"></a><span
style='color:black'> and above are shifted up to make room for the new entry.
If the new size of the array list after the insertion exceeds the capacity,
then the array list reallocates its storage array.<o:p></o:p></span></p>

<p class=doctext><a name="from_the"></a><a name=iddle1126></a><span
style='color:black'>Similarly, you can remove an element from the middle of an
array list:<o:p></o:p></span></p>

<pre><span style='color:black'>Employee e = staff.remove(n);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="are_copied"></a><span style='color:black'>The
elements located above it are copied down, and the size of the array is reduced
by one.<o:p></o:p></span></p>

<p class=doctext><a name="probably_not"></a><span style='color:black'>Inserting
and removing elements is not terribly efficient. It is probably not worth
worrying about for small array lists. But if you store many elements and
frequently insert and remove in the middle of a collection, consider using a
linked list instead. We explain how to program with linked lists in <a
href="http://proquestcombo.safaribooksonline.com/9780132354769/ch13#ch13">next</a>
lecture.<o:p></o:p></span></p>

<p class=doctext><a name="the_"></a><span style='color:black'>As of Java SE
5.0, you can use the &quot;for each&quot; loop to traverse the contents of an
array list</span><span style='font-size:8.5pt;color:black'>:<o:p></o:p></span></p>

<pre><span style='color:black'>for (Employee e : staff)<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span><span
class=docemphitalicalt>do something with</span> e<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="has_the"></a><span style='color:black'>This loop has
the same effect as<o:p></o:p></span></p>

<pre><span style='color:black'>for (int i = 0; i &lt; staff.size(); i++)<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>Employee e = staff.get(i);<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span><span
class=docemphitalicalt>do something with</span> e<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'><a
href="javascript:moveTo('ch05ex04');">Listing 5–4</a><a name="is_a"></a> is a
modification of the </span><tt><span style='mso-ansi-font-size:12.0pt;
mso-bidi-font-size:12.0pt;color:black'>EmployeeTest</span></tt><span
style='color:black'> program. The </span><tt><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt;color:black'>Employee[]</span></tt><a
name="replaced_by"></a><span style='color:black'> array is replaced by an </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>&lt;Employee&gt;</span></tt><a
name="the_following"></a><span style='color:black'>. Note the following
changes:<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><a name="specify_the"></a><![if !supportLists]><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;color:black'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='color:black'>You don't have to
specify the array size.<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='color:black'>You use </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>add</span></tt><a
name="you_like"></a><span style='color:black'> to add as many elements as you
like.<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='color:black'>You use </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>size()</span></tt><span
style='color:black'> instead of </span><tt><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt;color:black'>length</span></tt><span
style='color:black'> to count the number of elements.<o:p></o:p></span></p>

<p class=doclist style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;color:black'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='color:black'>You use </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>a.get(i)</span></tt><span
style='color:black'> instead of </span><tt><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt;color:black'>a[i]</span></tt><span
style='color:black'> to access an element.<o:p></o:p></span></p>

<h5><a name=ch05ex04></a>Listing 5–4. ArrayListTest.java<span style='font-size:
8.5pt;color:#1F3247'><o:p></o:p></span></h5>

<pre><span style='color:black'>1. import java.util.*;<o:p></o:p></span></pre><pre><span
style='color:black'> 2.<o:p></o:p></span></pre><pre><span style='color:black'> 3. /**<o:p></o:p></span></pre><pre><span
style='color:black'> 4.<span style='mso-spacerun:yes'>  </span>* This program demonstrates the <span
class=doctexthighlight2>ArrayList</span> class.<o:p></o:p></span></pre><pre><span
style='color:black'> 5.<span style='mso-spacerun:yes'>  </span>* @version 1.1 2004-02-21<o:p></o:p></span></pre><pre><span
style='color:black'> 6.<span style='mso-spacerun:yes'>  </span>* @author Cay Horstmann<o:p></o:p></span></pre><pre><span
style='color:black'> 7.<span style='mso-spacerun:yes'>  </span>*/<o:p></o:p></span></pre><pre><span
style='color:black'> 8. public class ArrayListTest<o:p></o:p></span></pre><pre><span
style='color:black'> 9. {<o:p></o:p></span></pre><pre><span style='color:black'>10.<span style='mso-spacerun:yes'>    </span>public static void main(String[] args)<o:p></o:p></span></pre><pre><span
style='color:black'>11.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>12.<span style='mso-spacerun:yes'>       </span>// fill the staff array list with three Employee objects<o:p></o:p></span></pre><pre><span
style='color:black'>13.<span style='mso-spacerun:yes'>       </span><span
class=doctexthighlight2>ArrayList</span>&lt;Employee&gt; staff = new <span
class=doctexthighlight2>ArrayList</span>&lt;Employee&gt;();<o:p></o:p></span></pre><pre><span
style='color:black'>14.<o:p></o:p></span></pre><pre><span style='color:black'>15.<span style='mso-spacerun:yes'>       </span>staff.add(new Employee(&quot;Carl Cracker&quot;, 75000, 1987, 12, 15));<o:p></o:p></span></pre><pre><span
style='color:black'>16.<span style='mso-spacerun:yes'>       </span>staff.add(new Employee(&quot;Harry Hacker&quot;, 50000, 1989, 10, 1));<o:p></o:p></span></pre><pre><span
style='color:black'>17.<span style='mso-spacerun:yes'>       </span>staff.add(new Employee(&quot;Tony Tester&quot;, 40000, 1990, 3, 15));<o:p></o:p></span></pre><pre><span
style='color:black'>18.<o:p></o:p></span></pre><pre><span style='color:black'>19.<span style='mso-spacerun:yes'>       </span>// raise everyone's salary by 5%<o:p></o:p></span></pre><pre><span
style='color:black'>20.<span style='mso-spacerun:yes'>       </span>for (Employee e : staff)<o:p></o:p></span></pre><pre><span
style='color:black'>21.<span style='mso-spacerun:yes'>          </span>e.raiseSalary(5);<o:p></o:p></span></pre><pre><span
style='color:black'>22.<o:p></o:p></span></pre><pre><span style='color:black'>23.<span style='mso-spacerun:yes'>       </span>// print out information about all Employee objects<o:p></o:p></span></pre><pre><span
style='color:black'>24.<span style='mso-spacerun:yes'>       </span>for (Employee e : staff)<o:p></o:p></span></pre><pre><span
style='color:black'>25.<span style='mso-spacerun:yes'>          </span>System.out.println(&quot;name=&quot; + e.getName() + &quot;,salary=&quot; + <o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>                         </span>e.getSalary() + &quot;,hireDay=&quot;<o:p></o:p></span></pre><pre><span
style='color:black'>26.<span style='mso-spacerun:yes'>                </span>+ e.getHireDay());<o:p></o:p></span></pre><pre><span
style='color:black'>27.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>28. }<o:p></o:p></span></pre><pre><span style='color:black'>29.<o:p></o:p></span></pre><pre><span
style='color:black'>30. class Employee<o:p></o:p></span></pre><pre><span
style='color:black'>31. {<o:p></o:p></span></pre><pre><span style='color:black'>32.<span style='mso-spacerun:yes'>    </span>public Employee(String n, double s, int year, int month, int day)<o:p></o:p></span></pre><pre><span
style='color:black'>33.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>34.<span style='mso-spacerun:yes'>       </span>name = n;<o:p></o:p></span></pre><pre><span
style='color:black'>35.<span style='mso-spacerun:yes'>       </span>salary = s;<o:p></o:p></span></pre><pre><span
style='color:black'>36.<span style='mso-spacerun:yes'>       </span>GregorianCalendar calendar = <o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>              </span>new GregorianCalendar(year, month - 1, day);<o:p></o:p></span></pre><pre><span
style='color:black'>37.<span style='mso-spacerun:yes'>       </span>hireDay = calendar.getTime();<o:p></o:p></span></pre><pre><span
style='color:black'>38.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>39.<o:p></o:p></span></pre><pre><span style='color:black'>40.<span style='mso-spacerun:yes'>    </span>public String getName()<o:p></o:p></span></pre><pre><span
style='color:black'>41.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>42.<span style='mso-spacerun:yes'>       </span>return name;<o:p></o:p></span></pre><pre><span
style='color:black'>43.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>44.<o:p></o:p></span></pre><pre><span style='color:black'>45.<span style='mso-spacerun:yes'>    </span>public double getSalary()<o:p></o:p></span></pre><pre><span
style='color:black'>46.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>47.<span style='mso-spacerun:yes'>       </span>return salary;<o:p></o:p></span></pre><pre><span
style='color:black'>48.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>49.<o:p></o:p></span></pre><pre><span style='color:black'>50.<span style='mso-spacerun:yes'>    </span>public Date getHireDay()<o:p></o:p></span></pre><pre><span
style='color:black'>51.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>52.<span style='mso-spacerun:yes'>       </span>return hireDay;<o:p></o:p></span></pre><pre><span
style='color:black'>53.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>54.<o:p></o:p></span></pre><pre><span style='color:black'>55.<span style='mso-spacerun:yes'>    </span>public void raiseSalary(double byPercent)<o:p></o:p></span></pre><pre><span
style='color:black'>56.<span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre><span
style='color:black'>57.<span style='mso-spacerun:yes'>       </span>double raise = salary * byPercent / 100;<o:p></o:p></span></pre><pre><span
style='color:black'>58.<span style='mso-spacerun:yes'>       </span>salary += raise;<o:p></o:p></span></pre><pre><span
style='color:black'>59.<span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='color:black'>60.<o:p></o:p></span></pre><pre><span style='color:black'>61.<span style='mso-spacerun:yes'>    </span>private String name;<o:p></o:p></span></pre><pre><span
style='color:black'>62.<span style='mso-spacerun:yes'>    </span>private double salary;<o:p></o:p></span></pre><pre><span
style='color:black'>63.<span style='mso-spacerun:yes'>    </span>private Date hireDay;<o:p></o:p></span></pre><pre><span
style='color:black'>64. }<o:p></o:p></span></pre><pre><span style='color:black'><o:p>&nbsp;</o:p></span></pre>

<h4>Compatibility between Typed and Raw Array Lists<span style='font-size:9.0pt;
color:white'><o:p></o:p></span></h4>

<p class=doctext><a name="write_new"></a><span style='color:black'>When you
write new code with Java SE 5.0 and beyond, you should use type parameters,
such as </span><span class=doctexthighlight2><span style='font-family:"Courier New";
color:black'>ArrayList</span></span><tt><span style='mso-ansi-font-size:12.0pt;
mso-bidi-font-size:12.0pt;color:black'>&lt;Employee&gt;</span></tt><a
name="for_array"></a><span style='color:black'>, for array lists. However, you
may need to interoperate with existing code that uses the raw </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><span
style='color:black'> type.<o:p></o:p></span></p>

<p class=doctext><a name="you_have"></a><span style='color:black'>Suppose that
you have the following legacy class:<o:p></o:p></span></p>

<pre><span style='color:black'>public class EmployeeDB<o:p></o:p></span></pre><pre><span
style='color:black'>{<o:p></o:p></span></pre><pre><span style='color:black'><span style='mso-spacerun:yes'>   </span>public void update(<span
class=doctexthighlight2>ArrayList</span> list) { ... }<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>public <span
class=doctexthighlight2>ArrayList</span> find(String query) { ... }<o:p></o:p></span></pre><pre><span
style='color:black'>}<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="can_pass"></a><span style='color:black'>You can pass
a typed array list to the </span><tt><span style='mso-ansi-font-size:12.0pt;
mso-bidi-font-size:12.0pt;color:black'>update</span></tt><span
style='color:black'> method without any casts.<o:p></o:p></span></p>

<pre><span class=doctexthighlight2><span style='color:black'>ArrayList</span></span><span
style='color:black'>&lt;Employee&gt; staff = ...;<o:p></o:p></span></pre><pre><span
style='color:black'>employeeDB.update(staff);<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><span style='color:black'>The </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>staff</span></tt><a
name="passed_to"></a><span style='color:black'> object is simply passed to the </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>update</span></tt><span
style='color:black'> method.<o:p></o:p></span></p>

<p class=docnotetitle><a name=ch05note34></a><b style='mso-bidi-font-weight:
normal'><span style='color:black'>Caution: <o:p></o:p></span></b></p>

<p class=doctext><a name="or_warning"></a><span style='color:black'>Even though
you get no error or warning from the compiler, this call is not completely
safe. The </span><tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:
12.0pt;color:black'>update</span></tt><a name="the_array"></a><span
style='color:black'> method might add elements into the array list that are not
of type </span><tt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:
12.0pt;color:black'>Employee</span></tt><a name="exception_occurs"></a><span
style='color:black'>. When these elements are retrieved, an exception occurs.
This sounds scary, but if you think about it, the behavior is simply as it was
before Java SE 5.0. The integrity of the virtual machine is never jeopardized.
In this situation, you do not lose security, but you also do not benefit from
the compile-time checks.<o:p></o:p></span></p>

<p class=doctext><a name=iddle3299></a><a name=iddle2710></a><a name=iddle1170></a><span
style='color:black'>Conversely, when you assign a raw </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><span
style='color:black'> to a typed one, you get a warning.<o:p></o:p></span></p>

<pre><a name=snippet></a><span class=doctexthighlight2><span style='color:black'>ArrayList</span></span><span
style='color:black'>&lt;Employee&gt; result = employeeDB.find(query); // yields warning<o:p></o:p></span></pre>

<p class=MsoNormal><a name=ch05note35></a><span style='font-size:8.5pt;
color:black'><o:p>&nbsp;</o:p></span></p>

<p class=docnotetitle><span style='color:black'>Note<o:p></o:p></span></p>

<p class=doctext><a name=option></a><span style='color:black'>To see the text
of the warning, compile with the option</span><span style='font-size:8.5pt;
color:black'> </span><tt><span style='font-size:10.0pt;color:black'>-Xlint:unchecked</span></tt><span
style='font-size:8.5pt;color:black'>.<o:p></o:p></span></p>

<p class=doctext><a name="warning_go"></a><span style='color:black'>Using a
cast does not make the warning go away.<o:p></o:p></span></p>

<pre><span class=doctexthighlight2><span style='color:black'>ArrayList</span></span><span
style='color:black'>&lt;Employee&gt; result = (<span class=doctexthighlight2>ArrayList</span>&lt;Employee&gt;)<o:p></o:p></span></pre><pre><span
style='color:black'><span style='mso-spacerun:yes'>   </span>employeeDB.find(query); // yields another warning<o:p></o:p></span></pre>

<p class=MsoNormal><span style='font-size:8.5pt;color:black'><o:p>&nbsp;</o:p></span></p>

<p class=doctext><a name="a_different"></a><span style='color:black'>Instead,
you get a different warning, telling you that the cast is misleading.<o:p></o:p></span></p>

<p class=doctext><a name="This_is"></a><span style='color:black'>This is the
consequence of a somewhat unfortunate limitation of generic types in Java. For
compatibility, the compiler translates all typed array lists into raw </span><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><a
name="checking_that"></a><span style='color:black'> objects after checking that
the type rules were not violated. In a running program, all array lists are the
same—there are no type parameters in the virtual machine. Thus, the casts </span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>(</span></tt><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>)</span></tt><span
style='color:black'> and </span><tt><span style='mso-ansi-font-size:12.0pt;
mso-bidi-font-size:12.0pt;color:black'>(</span></tt><span
class=doctexthighlight2><span style='font-family:"Courier New";color:black'>ArrayList</span></span><tt><span
style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt;color:black'>&lt;Employee&gt;)</span></tt><a
name="out_identical"></a><span style='color:black'> carry out identical runtime
checks.<o:p></o:p></span></p>

<p class=doctext><a name="can_do"></a><span style='color:black'>There isn't
much you can do about that situation. When you interact with legacy code, study
the compiler warnings and satisfy yourself that the warnings are not serious.<o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
