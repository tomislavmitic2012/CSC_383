Trees are non-linear data structures, they are a breakthrough in data organization, b/c they allow us to implement a host of algorithms
much faster than using linear data structures
  - They provide a natural organization for data, and are ubiquitous structures in file systems, graphical user interfaces, databses,
    web sites, and other computer systems
  - The relationships in a tree are hierarchical with some objects being above and some below others
  - The main terminology for data structures comes from family trees, with the terms "parent", "child", "ancestor", and "descendent" being
    the most common words used to describe relationships

Tree Definitions and Peroperties
  - Tree: an abstract data type that sotres elements hierarchically
  - parent: with the exception of the top element, each element in a tree has a parnet element
  - children: each parent element can have zero or more children elements
  - root: the top element of the tree, it is drawn as the highest element in the tree, with the other elements below it

Formal Tree Definition
  - A tree T is a set of nodes storing elements such that nodes have a parent-child relationship, that satisfies the following
    properties:
      -	If T is nonempty, it has a special node, call the root of T, that has no parent
      -	Each node v of T different from the root has a unique parent node w, every node with parent w is a child of w
  - according to this definition a tree can be empty, it doesn;t have any nodes
  - the convention also allows us to define a tree recursively, such that a tree T is either empty or consists of a node r, 
    called the root of T, and a (possibly empty) set of trees whost roots are the children of r

Other Node Relationships
  - Two nodes that are children of the same parent are siblings
  - A node v is external if v has no children
  - A node v is internal if it has one or more children
  - external nodes are also known as leaves
  - a node u is an ancestor of a node v if u = v or u is an ancestor of the parent of v
  - conversely we say that a node v is a descendant of a node u if u is an ancestor of v
  - the subtree of T rooted at a node v is the tree conisisting of all descendents of v in T (including v itself)

Edges and Paths in Trees
  - an edge of tree T is a pair of nodes (u,v) such that u is the parent of v, or vice versa
  - a path of T is a sequence of nodes such that any two consecutive nodes in the sequence form an edge

Ordered Trees
  - A tree is ordered if there is a linear ordering defined for the children of each node; we can identify the children of a node as being
    the first, second, third, and so on
  - Such an ordering is usually visualized by arranging siblings left to right, according to their ordering
  - Ordered trees typically indicate the linear order among siblings by listing them in the correct order

Tree ADT
  - The tree ADT stores elements at position, which are with positions in a list, are defined relative to neighboring positions
  - The positions in a tree are its nodes, and neighboring positions satisfy the parent-child relationships that define a valid tree
  - therefor we can use the terms position and node intercahngeably for trees
  
    - element(): return the object stored at this position
    - root(): return's the tree's root, an error occurs if the tree is empty
    - parent(v): return the parent of v, an error occurs if v is the root
    - children(v): return an iterable collection containing the children of node v
    - isInternal(v): test whehter the node v is internal
    - isExternal(v): test whether node v is external
    - isRoot(v): test whether node v is the root
    - size(): return the number of nodes in a tree
    - isEmpty(): test whether the tree has any nodes or not
    - iterator(): return an iterator of all the elements stored at nodes of the tree
    - positions(): return an iterable collection of all nodes of the tree
    - replace(v,e): replace with e and return the element stored at node v

A linked Structure for General Trees

A natural way to realize a tree T is to use a linked structure, where each node v of T is represented by a position object with the
following fields:
  - a reference to the element stored at v
  - a link to the parent of v
  - some kind of collection (a list or array) to store links to the children of v
  - if v is the root of T, then the parent field of v is null
  - We store a reference to the root of T and the number of nodes of T in internal variables
