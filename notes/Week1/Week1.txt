9/8/2011

int[] A = new int[10];

Aray: [10,50,15,11,20,integer,integer,integer,intteger,integer]

Question: What is the size of the array A? 
  10 * 4 = 40 bytes

Linked List

List: [10][]->[50][]->[15][]->[5][]->[11][]->[25][]

Double Linked List: [][10][]<->[][50][]<->[][15][]
  - can go forward and backward


			head
Circular Linked List: [10][]<->[50][]<->[15][]
			^		    |
			|		    |
		        |-------------------|

  - start at head end at head
  - if no head you will be in infinite loop

_____________________________________________________________________________________________________________________

What is a stack?

A data structure:
  - add to top: push
  - remove from the top: pop

| 15 | <- Top
------
| 50 |
------
| 10 |
------
Stack

class myStack {
  private int[] stack;
  private int top;
  private int size;

  public myStack( int size ) {
    stack = new int[ size ];
    this.size = size'
    top = -1;
  }

  public void push(int item) {
    top++;
    stack[ top ] = item;
  }

  public int pop() {
    return stack[ top-- ];
  }

  public int peek() {
    return stack[ top ];
  }
}

Linked list implementation of Stack

push( 25 )  ----->[15][]->[50][]->[10][]
	    |	    ^
	    |	    X
	 --------->Top
	 |  |
	[25][]


[ int ][ node ]
[ val ][ next ]

class {
  private int val;
  private Node next;
}

Stack: First in Last out
_____________________________________________________________________________________________________________________

Queues

Queue: First in First out


    Tail		  Head
--->[ ][]->[ ][]->[ ][]->[ ][]
|
|
New Comer

  - the head of the queue is the first one to receive the service and the first one to leave

       	             Head
  --->[ ][]->[ ][]->[ ][/]X>[ ][]
|		        ^
|		        |
[ ][]	               Set to null
Tail

 Head		             Tail
[ ][]->[ ][]->[ ][]->[ ][]->[ ][]

_____________________________________________________________________________________________________________________

Homework #1 - pp 70-77 (Implementation)

public class Progression {
  protected long first;
  protected long curr;
  ....
}

				  [ Progression Class ] -> data members first, curr
				      ^       ^       ^
				      |	      |	      |
			    [ Arithmetic ] [ Geom ] [ Fibonnacci ]
			    [ Prog       ] [ Prog ] [ Prog       ]
		      protected long int.

curr++ => curr.add(BigInteger.ONE);

Part One:

import java.math.BigInteger;

int 5	-> new BigInteger( "5" );
int 555 -> new BigInteger( "555" );
int n	-> new BigInteger( n + "" );

Part Two:

abs(2 - 200) -> 198
Abs(2 - 198) -> 196

prev = curr;
curr = ( curr.substract( prev ) ).abs();

Part 3:

Floor of the square root of the prev

int sqrt( int n ) {
  int r = 1;
  for( r = 1, r * r < n; r++ ) ;

  if ( r * r == n ) return r;
  else return r - 1;
}

for ( r = 1; r * r <= 10; r++ )
  return 4 - 1 = 3;

( r.multiply( r ) ).compareTo( n ) <= 0
  - this is equivalent to r * r <= n

Part 4:

Use BigInteger nextProbablePrime() function

/**
 * A class for numeric progressions.
 */
public class Progression {

  /** First value of the progression.  */
  protected long first;

  /** Current value of the progression.  */
  protected long cur;

  /** Default constructor.  */
  Progression() {
    cur = first = 0;
  }

  /** Resets the progression to the first value.
   * 
   * @return first value
   */
  protected long firstValue() {
    cur = first;
    return cur;
  }

  /** Advances the progression to the next value.
   *
   * @return next value of the progression
   */
  protected long nextValue() {
    return ++cur; // default next value
  }

  /** Prints the first n values of the progression.
   * 
   * @param n number of values to print
   */
  public void printProgression(int n) {
    System.out.print(firstValue());
    for (int i = 2; i <= n; i++) 
      System.out.print(" " + nextValue());
    System.out.println(); // ends the line
  }

   
}

/**
 * Arithmetic progression.
 */
class ArithProgression extends Progression {

  /** Increment. */
  protected long inc;

  // Inherits variables first and cur.

  /** Default constructor setting a unit increment. */
  ArithProgression() {
    this(1);
  }

  /** Parametric constructor providing the increment. */
  ArithProgression(long increment) {
    inc = increment; 
  }

  /** Advances the progression by adding the increment to the current value.
   * 
   * @return next value of the progression
   */
  protected long nextValue() {
    cur += inc;
    return cur;
  }

  //  Inherits methods firstValue() and printProgression(int).
}


/**
 * Geometric Progression
 */
class GeomProgression extends Progression {

  /** Base. */
  protected long base;

  // Inherits variables first and cur.

  /** Default constructor setting base 2. */
  GeomProgression() {
    this(2);
  }

  /** Parametric constructor providing the base.
   *
   * @param b base of the progression.
   */
  GeomProgression(long b) {
    base = b;
    first = 1;
    cur = first;
  }

  /** Advances the progression by multiplying the base with the current value.
   * 
   * @return next value of the progression
   */
  protected long nextValue() {
    cur *= base;
    return cur;
  }

  //  Inherits methods firstValue() and printProgression(int).
}



/**
 * Fibonacci progression.
 */
class FibonacciProgression extends Progression {
  /** Previous value. */
  long prev;   
  // Inherits variables first and cur.

  /** Default constructor setting 0 and 1 as the first two values. */
  FibonacciProgression() {
    this(0, 1);
  }
  /** Parametric constructor providing the first and second values.
   *
   * @param value1 first value.
   * @param value2 second value.
   */
  FibonacciProgression(long value1, long value2) {
      first = value1;
      prev = value2 - value1; // fictitious value preceding the first
  }

  /** Advances the progression by adding the previous value to the current value.
   * 
   * @return next value of the progression
   */
  protected long nextValue() {
    long temp = prev;
    prev = cur;
    cur += temp;
    return cur;
  }
  // Inherits methods firstValue() and printProgression(int).
}

_____________________________________________________________________________________________________________________

Array Copy

System.copy( a, 0, d, 10, 10 );
System.copy( Source Array, Starting Index, Destination Array, Starting Index, How Many );

a: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
     |  |
     |  _________________________________
     ________________________________   |
				    |   |
				   \/   \/
d: [  ,  ,  ,  ,  ,  ,  ,  ,  ,   ,   ,   , ]
     0  1  2  3  4  5  6  7  8   9  10  11


b = a.clone();
c = a;
d = System.copy( ... );

_____________________________________________________________________________________________________________________

Insertion

[ 7, 5, 1, 2, 0 ]
[ 0, 5, 1, 2, 7 ]
[ 0, 1, 5, 2, 7 ]
....



| 7 |		| 5 |	      | 5 |	    | 1 |
-----		-----	      -----	    -----
| 5 |-|  [ 5 ]  | 7 |	      | 1 |-| [ 1 ] | 5 |
-----		-----	      -----	    -----
| 1 |		| 1 |-| [ 1 ] | 7 |	    | 7 |
-----		-----	      -----	    -----
| 2 |		| 2 |	      | 2 |	    | 2 |
-----		-----	      -----	    -----
| 0 |		| 0 |	      | 0 |	    | 0 |
-----		-----	      -----	    -----
