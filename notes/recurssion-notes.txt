A method function calling itself is a recursive method

Examples:

Factorial:

  - recursive verision:

    public static long factorial(int n) {
      if (n == 0) return 1;
      return n * factorial(n - 1);
    }

  - iterative version:

    public static long factorial(int n) {
      long result = 1;

      for (int i = 0; i <= n; i++) {
	result *= i;
      }
      return result;
    }

Classifications of recursive methods:

  - Linear recursion: at most one recursive call each time it is invoked
  - Examples: summing the elements of an integer array

    - recursive version

      public static int sum(int[] A, int n) {
	if (n == 1) return A[0];
	return A[n-1] + sum(A, n - 1);
      }

    - iterative version

      public static int sum(int[] A, int n) {
	int result = 0;
	for (int i = 0; i < n; i++) {
	  result += A[i];
	}
	return result;
      }

  - Example: reversing an array

    - recursive version

      public static void reverse(int[] A, int i, int j) {
	int temp;

	if (i < j) {
	  temp = A[i];
	  A[i] = A[j];
	  A[j] = temp;
	}
	reverse(A, i + 1, j - 1);
      }

      public static void reverse(int[] A) {
	reverse(A, 0, A.length - 1);
      }

    - iterative version

      public static void reverse(int[] A, int i, int j) {
	int temp;

	while(i < j) {
	  temp = A[i];
	  A[i] = A[j];
	  A[j] = temp;
	  i++; j--;
	}
      }

  - Binary Recursion: Two recursive calls are made instead of one

      - Example: Fibonacci Sequence

	- Binary recursive function

	  public static long Fibonnacci(int n) {
	    if (n == 0 || n == 1) return n;
	    return Fibonacci(n - 1) + Fibonacci(n - 2);
	  }

	- Linear recursive method

	  public static long Fibonacci(int n, long f1, long f2) {
	    if (n == 0) return f1;
	    if (n == 1) return f2;

	    return Fibonacci(n - 1, f2, f1 + f2);
	  }

	  public static Fibonacci(int n) {
	    return Fibonacci(n, 0, 1);
	  }

	- Iterative

	  public static long Fibonacci(int n) {
	    long f1 = 0, f2 = 1, f3;

	    if (n == 0 || n == 1) return n;

	    for (int i = 2; i <= n; i++) {
	      f3 = f2 + f1;
	      f1 = f2;
	      f2 = f3;
	    }
	    return f3;
	  }

      - Example: Binary recursive version of summing the elements of an integer array

	public static int sum(int[] A, int i, int j) {
	  if (i > j) return 0;
	  else if (i == j) return A[i];

	  int mid = (i + j) / 2;

	  return sum(A, i, mid) + sum(A, mid + 1, j);
	}

	public static int sum(int[] A) {
	  return sum(A, 0, A.length - 1);
	}

  - Multiple Recursion: A method may make multiple (more than two) recursive calls

  - Indirect recursion:

      - Example:

	  public static boolean odd(int n) {
	    if (n == 0) return false;
	    return even(n - 1);
	  }

	  public static boolean even(int n) {
	    if (n == 0) return true;
	    return odd(n - 1);
	  }
