/**
 * A class used for sorting elements within an Array.
 * 
 * @author Tomislav S. Mitic
 *
 */
public class Sort< T > {
	private Sort< T > self = this;
	
	private static int switchSize = 10;
	
	/**
	 * Selection Sort - More efficient - Move every value only once
	 * 
	 * @param <T>
	 * @param a
	 */
	public static< T extends Comparable<? super T > > void selectionSort( T[] a ) {
		for ( int i = 0, max < a.length - 1, i < max; i++ ) {
			
		}
	}
	
	/**
	 * Bubble Sort -- Sort only necessary range
	 * 
	 * @param <T>
	 * @param a
	 */
	public static < T extends Comparable<? super T > > void bubbleSort( T[] a ) {
		int newLowest = 0;					// index of first comparison
		int newHighest = a.length - 1;		// index of last comparison
		while ( newLowest < newHighest ) {
			int highest = newHighest;
			int lowest = newLowest;
			newLowest = a.length;			// start higher that any legal index
			for ( int i = lowest; i < highest; i++ ) {
				if ( a[ i ].compareTo( a[ i + 1 ] ) > 0 ) {
					T temp = a[ i ];
					a[ i ] = a[ i + 1 ];
					a[ i + 1 ] = temp;
					
					if ( i < newLowest ) {
						newLowest = i - 1;
						if ( newLowest < 0 ) { newLowest = 0; }
					} else if ( i > newHighest ) {
						newHighest = i + 1;
					}
				}
			}
		}
	}
}