package array_index_list;

import interfaces.IndexList;

/**
 * Realization of an indexed list by means of an array, which is doubled
 * when the size of the indexed list exceeds the capacity of the array.
 * 
 * @author Tomislav S. Mitic
 *
 * @param <E>
 */
public class ArrayIndexList< E > implements IndexList< E > {
	private ArrayIndexList< E > self = this;
	
	private E[] A;						// array storing the elements of the indexed list
	private int capacity = 16;			// initial length of array A
	private int size = 0;				// number of elements stored in the indexed list
	
	/**
	 * Creates the indexed list with initial capacity 16.
	 */
	@SuppressWarnings("unchecked")
	public ArrayIndexList() {
		self.A = ( E[] ) new Object[ self.capacity ];					// compiler may warn but this is okay
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void add(int i, E e) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public E get(int i) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public E remove(int i) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public E set(int i, E e) throws IndexOutOfBoundsException {
		// TODO Auto-generated method stub
		return null;
	}
}