package array_stack;

import Exceptions.EmptyStackException;
import Exceptions.FullStackException;
import interfaces.Stack;

/**
 * Implementation of the stack ADT using a fixed length array. An
 * exception is thrown if a push  operation is attempted when the size
 * of the stack is is equal to the length of the array. This class 
 * includes the main methods of the built-in class java.util.Stack.
 * 
 * @author Tomislav S. Mitic
 *
 */
public class ArrayStack< E > implements Stack< E > {
	private ArrayStack< E > self = this;
	
	protected int capacity;								// the actual capacity of the stack array
	public static final int CAPACITY = 1000;			// default array capacity
	protected E S[];									// Generic array used to implement the stack
	protected int top = -1;								// index for the top of the stack
	
	public ArrayStack() {
		this(ArrayStack.CAPACITY);						// defaul capacity
	}
	
	public ArrayStack( int cap ) {
		self.capacity = cap;
		S = ( E[] ) new Object[ self.capacity ];		// compiler may give warning but this is okay
	}
	
	public int size() {
		return ( self.top + 1 );
	}
	
	public boolean isEmpty() {
		return ( self.top < 0 );
	}
	
	public void push( E element ) throws FullStackException {
		if( self.size() == capacity ) {
			throw new FullStackException( "ArrayStack Line 38: Stack is full." );
		}
		self.S[ ++self.top ] = element;
	}
	
	public E top() throws EmptyStackException {
		if( self.isEmpty() ) {
			throw new EmptyStackException( "ArrayStack Line 50: Stack is empty." );
		}
	}
}