package array_queue;

import java.io.PrintStream;
import exceptions.EmptyQueueException;
import interfaces.Queue;

public class ArrayQueue < E > implements Queue< E > {
	private ArrayQueue< E > self = this;
	
	public static final PrintStream output = new PrintStream( System.out );

	protected int capacity;								// the actual capacity of the stack array
	public static final int CAPACITY = 1000;			// default array capacity
	protected E S[];									// Generic array used to implement the queue
	protected int front = 0;							// index for the front of the stack
	protected int rear = 0;								// index for the rear of the stack
	
	public ArrayQueue() {
		this( ArrayQueue.CAPACITY );
	}
	
	@SuppressWarnings("unchecked")
	public ArrayQueue( int cap ) {
		self.capacity = cap;
		S = ( E[] ) new Object[ self.capacity ];		// compiler may give warning but this is okay
	}
	
	public int size() {
		return ( self.capacity - self.front + self.rear );
	}
	
	public boolean isEmpty() {
		return ( self.front == self.rear );
	}

	@Override
	public E front() throws EmptyQueueException {
		if ( self.isEmpty() ) {
			throw new EmptyQueueException( "" );
		}
	}

	@Override
	public void enqueue(E element) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public E dequeue() throws EmptyQueueException {
		// TODO Auto-generated method stub
		return null;
	}
}